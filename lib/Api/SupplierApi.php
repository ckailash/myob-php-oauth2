<?php
/**
 * SupplierApi
 * PHP version 5
 *
 * @category Class
 * @package  MyobAPI\MyobPHP
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * MYOB AccountRight
 *
 * MYOB AccountRight API file
 *
 * The version of the OpenAPI document: 1.0
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 4.3.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace MyobAPI\MyobPHP\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use MyobAPI\MyobPHP\ApiException;
use MyobAPI\MyobPHP\Configuration;
use MyobAPI\MyobPHP\HeaderSelector;
use MyobAPI\MyobPHP\ObjectSerializer;

/**
 * SupplierApi Class Doc Comment
 *
 * @category Class
 * @package  MyobAPI\MyobPHP
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class SupplierApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $host_index (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $host_index = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $host_index;
    }

    /**
     * Set the host index
     *
     * @param  int Host index (required)
     */
    public function setHostIndex($host_index)
    {
        $this->hostIndex = $host_index;
    }

    /**
     * Get the host index
     *
     * @return Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation createSupplier
     *
     * Create a new supplier
     *
     * @param  string $x_myobapi_key The API key registered in https://my.myob.com.au/au/bd/DevAppList.aspx (required)
     * @param  string $company_file_id The ID of the company in use (required)
     * @param  \MyobAPI\MyobPHP\Model\CreateSupplierRequest $create_supplier_request create_supplier_request (required)
     * @param  string $x_myobapi_version The version of the API, v2 is the current version (optional, default to 'v2')
     * @param  string $accept_encoding accept_encoding (optional, default to 'gzip,deflate')
     *
     * @throws \MyobAPI\MyobPHP\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return object
     */
    public function createSupplier($x_myobapi_key, $company_file_id, $create_supplier_request, $x_myobapi_version = 'v2', $accept_encoding = 'gzip,deflate')
    {
        list($response) = $this->createSupplierWithHttpInfo($x_myobapi_key, $company_file_id, $create_supplier_request, $x_myobapi_version, $accept_encoding);
        return $response;
    }

    /**
     * Operation createSupplierWithHttpInfo
     *
     * Create a new supplier
     *
     * @param  string $x_myobapi_key The API key registered in https://my.myob.com.au/au/bd/DevAppList.aspx (required)
     * @param  string $company_file_id The ID of the company in use (required)
     * @param  \MyobAPI\MyobPHP\Model\CreateSupplierRequest $create_supplier_request (required)
     * @param  string $x_myobapi_version The version of the API, v2 is the current version (optional, default to 'v2')
     * @param  string $accept_encoding (optional, default to 'gzip,deflate')
     *
     * @throws \MyobAPI\MyobPHP\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of object, HTTP status code, HTTP response headers (array of strings)
     */
    public function createSupplierWithHttpInfo($x_myobapi_key, $company_file_id, $create_supplier_request, $x_myobapi_version = 'v2', $accept_encoding = 'gzip,deflate')
    {
        $request = $this->createSupplierRequest($x_myobapi_key, $company_file_id, $create_supplier_request, $x_myobapi_version, $accept_encoding);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 201:
                    if ('object' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'object', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'object';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createSupplierAsync
     *
     * Create a new supplier
     *
     * @param  string $x_myobapi_key The API key registered in https://my.myob.com.au/au/bd/DevAppList.aspx (required)
     * @param  string $company_file_id The ID of the company in use (required)
     * @param  \MyobAPI\MyobPHP\Model\CreateSupplierRequest $create_supplier_request (required)
     * @param  string $x_myobapi_version The version of the API, v2 is the current version (optional, default to 'v2')
     * @param  string $accept_encoding (optional, default to 'gzip,deflate')
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createSupplierAsync($x_myobapi_key, $company_file_id, $create_supplier_request, $x_myobapi_version = 'v2', $accept_encoding = 'gzip,deflate')
    {
        return $this->createSupplierAsyncWithHttpInfo($x_myobapi_key, $company_file_id, $create_supplier_request, $x_myobapi_version, $accept_encoding)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createSupplierAsyncWithHttpInfo
     *
     * Create a new supplier
     *
     * @param  string $x_myobapi_key The API key registered in https://my.myob.com.au/au/bd/DevAppList.aspx (required)
     * @param  string $company_file_id The ID of the company in use (required)
     * @param  \MyobAPI\MyobPHP\Model\CreateSupplierRequest $create_supplier_request (required)
     * @param  string $x_myobapi_version The version of the API, v2 is the current version (optional, default to 'v2')
     * @param  string $accept_encoding (optional, default to 'gzip,deflate')
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createSupplierAsyncWithHttpInfo($x_myobapi_key, $company_file_id, $create_supplier_request, $x_myobapi_version = 'v2', $accept_encoding = 'gzip,deflate')
    {
        $returnType = 'object';
        $request = $this->createSupplierRequest($x_myobapi_key, $company_file_id, $create_supplier_request, $x_myobapi_version, $accept_encoding);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createSupplier'
     *
     * @param  string $x_myobapi_key The API key registered in https://my.myob.com.au/au/bd/DevAppList.aspx (required)
     * @param  string $company_file_id The ID of the company in use (required)
     * @param  \MyobAPI\MyobPHP\Model\CreateSupplierRequest $create_supplier_request (required)
     * @param  string $x_myobapi_version The version of the API, v2 is the current version (optional, default to 'v2')
     * @param  string $accept_encoding (optional, default to 'gzip,deflate')
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function createSupplierRequest($x_myobapi_key, $company_file_id, $create_supplier_request, $x_myobapi_version = 'v2', $accept_encoding = 'gzip,deflate')
    {
        // verify the required parameter 'x_myobapi_key' is set
        if ($x_myobapi_key === null || (is_array($x_myobapi_key) && count($x_myobapi_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_myobapi_key when calling createSupplier'
            );
        }
        // verify the required parameter 'company_file_id' is set
        if ($company_file_id === null || (is_array($company_file_id) && count($company_file_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $company_file_id when calling createSupplier'
            );
        }
        // verify the required parameter 'create_supplier_request' is set
        if ($create_supplier_request === null || (is_array($create_supplier_request) && count($create_supplier_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $create_supplier_request when calling createSupplier'
            );
        }

        $resourcePath = '/{company_file_id}/Contact/Supplier';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($x_myobapi_key !== null) {
            $headerParams['x-myobapi-key'] = ObjectSerializer::toHeaderValue($x_myobapi_key);
        }
        // header params
        if ($x_myobapi_version !== null) {
            $headerParams['x-myobapi-version'] = ObjectSerializer::toHeaderValue($x_myobapi_version);
        }
        // header params
        if ($accept_encoding !== null) {
            $headerParams['Accept-Encoding'] = ObjectSerializer::toHeaderValue($accept_encoding);
        }

        // path params
        if ($company_file_id !== null) {
            $resourcePath = str_replace(
                '{' . 'company_file_id' . '}',
                ObjectSerializer::toPathValue($company_file_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($create_supplier_request)) {
            $_tempBody = $create_supplier_request;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['text/plain']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['text/plain'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteSupplier
     *
     * Delete a supplier
     *
     * @param  string $x_myobapi_key The API key registered in https://my.myob.com.au/au/bd/DevAppList.aspx (required)
     * @param  string $company_file_id The ID of the company in use (required)
     * @param  string $guid The GUID of the resource being created (required)
     * @param  \MyobAPI\MyobPHP\Model\DeleteSupplierRequest $delete_supplier_request delete_supplier_request (required)
     * @param  string $x_myobapi_version The version of the API, v2 is the current version (optional, default to 'v2')
     * @param  string $accept_encoding accept_encoding (optional, default to 'gzip,deflate')
     *
     * @throws \MyobAPI\MyobPHP\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function deleteSupplier($x_myobapi_key, $company_file_id, $guid, $delete_supplier_request, $x_myobapi_version = 'v2', $accept_encoding = 'gzip,deflate')
    {
        $this->deleteSupplierWithHttpInfo($x_myobapi_key, $company_file_id, $guid, $delete_supplier_request, $x_myobapi_version, $accept_encoding);
    }

    /**
     * Operation deleteSupplierWithHttpInfo
     *
     * Delete a supplier
     *
     * @param  string $x_myobapi_key The API key registered in https://my.myob.com.au/au/bd/DevAppList.aspx (required)
     * @param  string $company_file_id The ID of the company in use (required)
     * @param  string $guid The GUID of the resource being created (required)
     * @param  \MyobAPI\MyobPHP\Model\DeleteSupplierRequest $delete_supplier_request (required)
     * @param  string $x_myobapi_version The version of the API, v2 is the current version (optional, default to 'v2')
     * @param  string $accept_encoding (optional, default to 'gzip,deflate')
     *
     * @throws \MyobAPI\MyobPHP\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteSupplierWithHttpInfo($x_myobapi_key, $company_file_id, $guid, $delete_supplier_request, $x_myobapi_version = 'v2', $accept_encoding = 'gzip,deflate')
    {
        $request = $this->deleteSupplierRequest($x_myobapi_key, $company_file_id, $guid, $delete_supplier_request, $x_myobapi_version, $accept_encoding);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation deleteSupplierAsync
     *
     * Delete a supplier
     *
     * @param  string $x_myobapi_key The API key registered in https://my.myob.com.au/au/bd/DevAppList.aspx (required)
     * @param  string $company_file_id The ID of the company in use (required)
     * @param  string $guid The GUID of the resource being created (required)
     * @param  \MyobAPI\MyobPHP\Model\DeleteSupplierRequest $delete_supplier_request (required)
     * @param  string $x_myobapi_version The version of the API, v2 is the current version (optional, default to 'v2')
     * @param  string $accept_encoding (optional, default to 'gzip,deflate')
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteSupplierAsync($x_myobapi_key, $company_file_id, $guid, $delete_supplier_request, $x_myobapi_version = 'v2', $accept_encoding = 'gzip,deflate')
    {
        return $this->deleteSupplierAsyncWithHttpInfo($x_myobapi_key, $company_file_id, $guid, $delete_supplier_request, $x_myobapi_version, $accept_encoding)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteSupplierAsyncWithHttpInfo
     *
     * Delete a supplier
     *
     * @param  string $x_myobapi_key The API key registered in https://my.myob.com.au/au/bd/DevAppList.aspx (required)
     * @param  string $company_file_id The ID of the company in use (required)
     * @param  string $guid The GUID of the resource being created (required)
     * @param  \MyobAPI\MyobPHP\Model\DeleteSupplierRequest $delete_supplier_request (required)
     * @param  string $x_myobapi_version The version of the API, v2 is the current version (optional, default to 'v2')
     * @param  string $accept_encoding (optional, default to 'gzip,deflate')
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteSupplierAsyncWithHttpInfo($x_myobapi_key, $company_file_id, $guid, $delete_supplier_request, $x_myobapi_version = 'v2', $accept_encoding = 'gzip,deflate')
    {
        $returnType = '';
        $request = $this->deleteSupplierRequest($x_myobapi_key, $company_file_id, $guid, $delete_supplier_request, $x_myobapi_version, $accept_encoding);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteSupplier'
     *
     * @param  string $x_myobapi_key The API key registered in https://my.myob.com.au/au/bd/DevAppList.aspx (required)
     * @param  string $company_file_id The ID of the company in use (required)
     * @param  string $guid The GUID of the resource being created (required)
     * @param  \MyobAPI\MyobPHP\Model\DeleteSupplierRequest $delete_supplier_request (required)
     * @param  string $x_myobapi_version The version of the API, v2 is the current version (optional, default to 'v2')
     * @param  string $accept_encoding (optional, default to 'gzip,deflate')
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deleteSupplierRequest($x_myobapi_key, $company_file_id, $guid, $delete_supplier_request, $x_myobapi_version = 'v2', $accept_encoding = 'gzip,deflate')
    {
        // verify the required parameter 'x_myobapi_key' is set
        if ($x_myobapi_key === null || (is_array($x_myobapi_key) && count($x_myobapi_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_myobapi_key when calling deleteSupplier'
            );
        }
        // verify the required parameter 'company_file_id' is set
        if ($company_file_id === null || (is_array($company_file_id) && count($company_file_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $company_file_id when calling deleteSupplier'
            );
        }
        // verify the required parameter 'guid' is set
        if ($guid === null || (is_array($guid) && count($guid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $guid when calling deleteSupplier'
            );
        }
        // verify the required parameter 'delete_supplier_request' is set
        if ($delete_supplier_request === null || (is_array($delete_supplier_request) && count($delete_supplier_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $delete_supplier_request when calling deleteSupplier'
            );
        }

        $resourcePath = '/{company_file_id}/Contact/Supplier/{guid}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($x_myobapi_key !== null) {
            $headerParams['x-myobapi-key'] = ObjectSerializer::toHeaderValue($x_myobapi_key);
        }
        // header params
        if ($x_myobapi_version !== null) {
            $headerParams['x-myobapi-version'] = ObjectSerializer::toHeaderValue($x_myobapi_version);
        }
        // header params
        if ($accept_encoding !== null) {
            $headerParams['Accept-Encoding'] = ObjectSerializer::toHeaderValue($accept_encoding);
        }

        // path params
        if ($company_file_id !== null) {
            $resourcePath = str_replace(
                '{' . 'company_file_id' . '}',
                ObjectSerializer::toPathValue($company_file_id),
                $resourcePath
            );
        }
        // path params
        if ($guid !== null) {
            $resourcePath = str_replace(
                '{' . 'guid' . '}',
                ObjectSerializer::toPathValue($guid),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($delete_supplier_request)) {
            $_tempBody = $delete_supplier_request;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation editSupplier
     *
     * Edit a supplier
     *
     * @param  string $x_myobapi_key The API key registered in https://my.myob.com.au/au/bd/DevAppList.aspx (required)
     * @param  string $company_file_id The ID of the company in use (required)
     * @param  string $guid The GUID of the resource being created (required)
     * @param  \MyobAPI\MyobPHP\Model\EditSupplierRequest $edit_supplier_request edit_supplier_request (required)
     * @param  string $x_myobapi_version The version of the API, v2 is the current version (optional, default to 'v2')
     * @param  string $accept_encoding accept_encoding (optional, default to 'gzip,deflate')
     *
     * @throws \MyobAPI\MyobPHP\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return object
     */
    public function editSupplier($x_myobapi_key, $company_file_id, $guid, $edit_supplier_request, $x_myobapi_version = 'v2', $accept_encoding = 'gzip,deflate')
    {
        list($response) = $this->editSupplierWithHttpInfo($x_myobapi_key, $company_file_id, $guid, $edit_supplier_request, $x_myobapi_version, $accept_encoding);
        return $response;
    }

    /**
     * Operation editSupplierWithHttpInfo
     *
     * Edit a supplier
     *
     * @param  string $x_myobapi_key The API key registered in https://my.myob.com.au/au/bd/DevAppList.aspx (required)
     * @param  string $company_file_id The ID of the company in use (required)
     * @param  string $guid The GUID of the resource being created (required)
     * @param  \MyobAPI\MyobPHP\Model\EditSupplierRequest $edit_supplier_request (required)
     * @param  string $x_myobapi_version The version of the API, v2 is the current version (optional, default to 'v2')
     * @param  string $accept_encoding (optional, default to 'gzip,deflate')
     *
     * @throws \MyobAPI\MyobPHP\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of object, HTTP status code, HTTP response headers (array of strings)
     */
    public function editSupplierWithHttpInfo($x_myobapi_key, $company_file_id, $guid, $edit_supplier_request, $x_myobapi_version = 'v2', $accept_encoding = 'gzip,deflate')
    {
        $request = $this->editSupplierRequest($x_myobapi_key, $company_file_id, $guid, $edit_supplier_request, $x_myobapi_version, $accept_encoding);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('object' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'object', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'object';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation editSupplierAsync
     *
     * Edit a supplier
     *
     * @param  string $x_myobapi_key The API key registered in https://my.myob.com.au/au/bd/DevAppList.aspx (required)
     * @param  string $company_file_id The ID of the company in use (required)
     * @param  string $guid The GUID of the resource being created (required)
     * @param  \MyobAPI\MyobPHP\Model\EditSupplierRequest $edit_supplier_request (required)
     * @param  string $x_myobapi_version The version of the API, v2 is the current version (optional, default to 'v2')
     * @param  string $accept_encoding (optional, default to 'gzip,deflate')
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function editSupplierAsync($x_myobapi_key, $company_file_id, $guid, $edit_supplier_request, $x_myobapi_version = 'v2', $accept_encoding = 'gzip,deflate')
    {
        return $this->editSupplierAsyncWithHttpInfo($x_myobapi_key, $company_file_id, $guid, $edit_supplier_request, $x_myobapi_version, $accept_encoding)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation editSupplierAsyncWithHttpInfo
     *
     * Edit a supplier
     *
     * @param  string $x_myobapi_key The API key registered in https://my.myob.com.au/au/bd/DevAppList.aspx (required)
     * @param  string $company_file_id The ID of the company in use (required)
     * @param  string $guid The GUID of the resource being created (required)
     * @param  \MyobAPI\MyobPHP\Model\EditSupplierRequest $edit_supplier_request (required)
     * @param  string $x_myobapi_version The version of the API, v2 is the current version (optional, default to 'v2')
     * @param  string $accept_encoding (optional, default to 'gzip,deflate')
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function editSupplierAsyncWithHttpInfo($x_myobapi_key, $company_file_id, $guid, $edit_supplier_request, $x_myobapi_version = 'v2', $accept_encoding = 'gzip,deflate')
    {
        $returnType = 'object';
        $request = $this->editSupplierRequest($x_myobapi_key, $company_file_id, $guid, $edit_supplier_request, $x_myobapi_version, $accept_encoding);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'editSupplier'
     *
     * @param  string $x_myobapi_key The API key registered in https://my.myob.com.au/au/bd/DevAppList.aspx (required)
     * @param  string $company_file_id The ID of the company in use (required)
     * @param  string $guid The GUID of the resource being created (required)
     * @param  \MyobAPI\MyobPHP\Model\EditSupplierRequest $edit_supplier_request (required)
     * @param  string $x_myobapi_version The version of the API, v2 is the current version (optional, default to 'v2')
     * @param  string $accept_encoding (optional, default to 'gzip,deflate')
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function editSupplierRequest($x_myobapi_key, $company_file_id, $guid, $edit_supplier_request, $x_myobapi_version = 'v2', $accept_encoding = 'gzip,deflate')
    {
        // verify the required parameter 'x_myobapi_key' is set
        if ($x_myobapi_key === null || (is_array($x_myobapi_key) && count($x_myobapi_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_myobapi_key when calling editSupplier'
            );
        }
        // verify the required parameter 'company_file_id' is set
        if ($company_file_id === null || (is_array($company_file_id) && count($company_file_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $company_file_id when calling editSupplier'
            );
        }
        // verify the required parameter 'guid' is set
        if ($guid === null || (is_array($guid) && count($guid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $guid when calling editSupplier'
            );
        }
        // verify the required parameter 'edit_supplier_request' is set
        if ($edit_supplier_request === null || (is_array($edit_supplier_request) && count($edit_supplier_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $edit_supplier_request when calling editSupplier'
            );
        }

        $resourcePath = '/{company_file_id}/Contact/Supplier/{guid}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($x_myobapi_key !== null) {
            $headerParams['x-myobapi-key'] = ObjectSerializer::toHeaderValue($x_myobapi_key);
        }
        // header params
        if ($x_myobapi_version !== null) {
            $headerParams['x-myobapi-version'] = ObjectSerializer::toHeaderValue($x_myobapi_version);
        }
        // header params
        if ($accept_encoding !== null) {
            $headerParams['Accept-Encoding'] = ObjectSerializer::toHeaderValue($accept_encoding);
        }

        // path params
        if ($company_file_id !== null) {
            $resourcePath = str_replace(
                '{' . 'company_file_id' . '}',
                ObjectSerializer::toPathValue($company_file_id),
                $resourcePath
            );
        }
        // path params
        if ($guid !== null) {
            $resourcePath = str_replace(
                '{' . 'guid' . '}',
                ObjectSerializer::toPathValue($guid),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($edit_supplier_request)) {
            $_tempBody = $edit_supplier_request;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['text/plain']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['text/plain'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getSupplier
     *
     * Get a supplier by GUID
     *
     * @param  string $x_myobapi_key The API key registered in https://my.myob.com.au/au/bd/DevAppList.aspx (required)
     * @param  string $company_file_id The ID of the company in use (required)
     * @param  string $guid The GUID of the resource being created (required)
     * @param  string $x_myobapi_version The version of the API, v2 is the current version (optional, default to 'v2')
     * @param  string $accept_encoding accept_encoding (optional, default to 'gzip,deflate')
     *
     * @throws \MyobAPI\MyobPHP\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \MyobAPI\MyobPHP\Model\Suppliers
     */
    public function getSupplier($x_myobapi_key, $company_file_id, $guid, $x_myobapi_version = 'v2', $accept_encoding = 'gzip,deflate')
    {
        list($response) = $this->getSupplierWithHttpInfo($x_myobapi_key, $company_file_id, $guid, $x_myobapi_version, $accept_encoding);
        return $response;
    }

    /**
     * Operation getSupplierWithHttpInfo
     *
     * Get a supplier by GUID
     *
     * @param  string $x_myobapi_key The API key registered in https://my.myob.com.au/au/bd/DevAppList.aspx (required)
     * @param  string $company_file_id The ID of the company in use (required)
     * @param  string $guid The GUID of the resource being created (required)
     * @param  string $x_myobapi_version The version of the API, v2 is the current version (optional, default to 'v2')
     * @param  string $accept_encoding (optional, default to 'gzip,deflate')
     *
     * @throws \MyobAPI\MyobPHP\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \MyobAPI\MyobPHP\Model\Suppliers, HTTP status code, HTTP response headers (array of strings)
     */
    public function getSupplierWithHttpInfo($x_myobapi_key, $company_file_id, $guid, $x_myobapi_version = 'v2', $accept_encoding = 'gzip,deflate')
    {
        $request = $this->getSupplierRequest($x_myobapi_key, $company_file_id, $guid, $x_myobapi_version, $accept_encoding);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\MyobAPI\MyobPHP\Model\Suppliers' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\MyobAPI\MyobPHP\Model\Suppliers', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\MyobAPI\MyobPHP\Model\Suppliers';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MyobAPI\MyobPHP\Model\Suppliers',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getSupplierAsync
     *
     * Get a supplier by GUID
     *
     * @param  string $x_myobapi_key The API key registered in https://my.myob.com.au/au/bd/DevAppList.aspx (required)
     * @param  string $company_file_id The ID of the company in use (required)
     * @param  string $guid The GUID of the resource being created (required)
     * @param  string $x_myobapi_version The version of the API, v2 is the current version (optional, default to 'v2')
     * @param  string $accept_encoding (optional, default to 'gzip,deflate')
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getSupplierAsync($x_myobapi_key, $company_file_id, $guid, $x_myobapi_version = 'v2', $accept_encoding = 'gzip,deflate')
    {
        return $this->getSupplierAsyncWithHttpInfo($x_myobapi_key, $company_file_id, $guid, $x_myobapi_version, $accept_encoding)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getSupplierAsyncWithHttpInfo
     *
     * Get a supplier by GUID
     *
     * @param  string $x_myobapi_key The API key registered in https://my.myob.com.au/au/bd/DevAppList.aspx (required)
     * @param  string $company_file_id The ID of the company in use (required)
     * @param  string $guid The GUID of the resource being created (required)
     * @param  string $x_myobapi_version The version of the API, v2 is the current version (optional, default to 'v2')
     * @param  string $accept_encoding (optional, default to 'gzip,deflate')
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getSupplierAsyncWithHttpInfo($x_myobapi_key, $company_file_id, $guid, $x_myobapi_version = 'v2', $accept_encoding = 'gzip,deflate')
    {
        $returnType = '\MyobAPI\MyobPHP\Model\Suppliers';
        $request = $this->getSupplierRequest($x_myobapi_key, $company_file_id, $guid, $x_myobapi_version, $accept_encoding);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getSupplier'
     *
     * @param  string $x_myobapi_key The API key registered in https://my.myob.com.au/au/bd/DevAppList.aspx (required)
     * @param  string $company_file_id The ID of the company in use (required)
     * @param  string $guid The GUID of the resource being created (required)
     * @param  string $x_myobapi_version The version of the API, v2 is the current version (optional, default to 'v2')
     * @param  string $accept_encoding (optional, default to 'gzip,deflate')
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getSupplierRequest($x_myobapi_key, $company_file_id, $guid, $x_myobapi_version = 'v2', $accept_encoding = 'gzip,deflate')
    {
        // verify the required parameter 'x_myobapi_key' is set
        if ($x_myobapi_key === null || (is_array($x_myobapi_key) && count($x_myobapi_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_myobapi_key when calling getSupplier'
            );
        }
        // verify the required parameter 'company_file_id' is set
        if ($company_file_id === null || (is_array($company_file_id) && count($company_file_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $company_file_id when calling getSupplier'
            );
        }
        // verify the required parameter 'guid' is set
        if ($guid === null || (is_array($guid) && count($guid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $guid when calling getSupplier'
            );
        }

        $resourcePath = '/{company_file_id}/Contact/Supplier/{guid}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($x_myobapi_key !== null) {
            $headerParams['x-myobapi-key'] = ObjectSerializer::toHeaderValue($x_myobapi_key);
        }
        // header params
        if ($x_myobapi_version !== null) {
            $headerParams['x-myobapi-version'] = ObjectSerializer::toHeaderValue($x_myobapi_version);
        }
        // header params
        if ($accept_encoding !== null) {
            $headerParams['Accept-Encoding'] = ObjectSerializer::toHeaderValue($accept_encoding);
        }

        // path params
        if ($company_file_id !== null) {
            $resourcePath = str_replace(
                '{' . 'company_file_id' . '}',
                ObjectSerializer::toPathValue($company_file_id),
                $resourcePath
            );
        }
        // path params
        if ($guid !== null) {
            $resourcePath = str_replace(
                '{' . 'guid' . '}',
                ObjectSerializer::toPathValue($guid),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json; charset=utf-8']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json; charset=utf-8'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getSuppliers
     *
     * Fetch a list of all Suppliers
     *
     * @param  string $x_myobapi_key The API key registered in https://my.myob.com.au/au/bd/DevAppList.aspx (required)
     * @param  string $company_file_id The ID of the company in use (required)
     * @param  string $x_myobapi_version The version of the API, v2 is the current version (optional, default to 'v2')
     * @param  string $accept_encoding accept_encoding (optional, default to 'gzip,deflate')
     * @param  string $if_modified_since Only records created or modified since this timestamp will be returned (optional)
     * @param  string $if_none_match If the collection or individual resource hasn&#39;t been modified based on the request made, 304 Not Modified with an empty body is returned, if the resource has been modified 200 success code along with the resource is returned. (optional)
     * @param  string $order_by Order results in ascending or descending order, by a specified field. (optional)
     * @param  string $top Retrieve the first x records in a list. (optional)
     * @param  string $skip Retrieve all records in a list, except for the first x records (optional)
     * @param  string $filter Retrieve all records matching a specified expression. (optional)
     *
     * @throws \MyobAPI\MyobPHP\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \MyobAPI\MyobPHP\Model\ListOfSuppliers
     */
    public function getSuppliers($x_myobapi_key, $company_file_id, $x_myobapi_version = 'v2', $accept_encoding = 'gzip,deflate', $if_modified_since = null, $if_none_match = null, $order_by = null, $top = null, $skip = null, $filter = null)
    {
        list($response) = $this->getSuppliersWithHttpInfo($x_myobapi_key, $company_file_id, $x_myobapi_version, $accept_encoding, $if_modified_since, $if_none_match, $order_by, $top, $skip, $filter);
        return $response;
    }

    /**
     * Operation getSuppliersWithHttpInfo
     *
     * Fetch a list of all Suppliers
     *
     * @param  string $x_myobapi_key The API key registered in https://my.myob.com.au/au/bd/DevAppList.aspx (required)
     * @param  string $company_file_id The ID of the company in use (required)
     * @param  string $x_myobapi_version The version of the API, v2 is the current version (optional, default to 'v2')
     * @param  string $accept_encoding (optional, default to 'gzip,deflate')
     * @param  string $if_modified_since Only records created or modified since this timestamp will be returned (optional)
     * @param  string $if_none_match If the collection or individual resource hasn&#39;t been modified based on the request made, 304 Not Modified with an empty body is returned, if the resource has been modified 200 success code along with the resource is returned. (optional)
     * @param  string $order_by Order results in ascending or descending order, by a specified field. (optional)
     * @param  string $top Retrieve the first x records in a list. (optional)
     * @param  string $skip Retrieve all records in a list, except for the first x records (optional)
     * @param  string $filter Retrieve all records matching a specified expression. (optional)
     *
     * @throws \MyobAPI\MyobPHP\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \MyobAPI\MyobPHP\Model\ListOfSuppliers, HTTP status code, HTTP response headers (array of strings)
     */
    public function getSuppliersWithHttpInfo($x_myobapi_key, $company_file_id, $x_myobapi_version = 'v2', $accept_encoding = 'gzip,deflate', $if_modified_since = null, $if_none_match = null, $order_by = null, $top = null, $skip = null, $filter = null)
    {
        $request = $this->getSuppliersRequest($x_myobapi_key, $company_file_id, $x_myobapi_version, $accept_encoding, $if_modified_since, $if_none_match, $order_by, $top, $skip, $filter);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\MyobAPI\MyobPHP\Model\ListOfSuppliers' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\MyobAPI\MyobPHP\Model\ListOfSuppliers', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\MyobAPI\MyobPHP\Model\ListOfSuppliers';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MyobAPI\MyobPHP\Model\ListOfSuppliers',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getSuppliersAsync
     *
     * Fetch a list of all Suppliers
     *
     * @param  string $x_myobapi_key The API key registered in https://my.myob.com.au/au/bd/DevAppList.aspx (required)
     * @param  string $company_file_id The ID of the company in use (required)
     * @param  string $x_myobapi_version The version of the API, v2 is the current version (optional, default to 'v2')
     * @param  string $accept_encoding (optional, default to 'gzip,deflate')
     * @param  string $if_modified_since Only records created or modified since this timestamp will be returned (optional)
     * @param  string $if_none_match If the collection or individual resource hasn&#39;t been modified based on the request made, 304 Not Modified with an empty body is returned, if the resource has been modified 200 success code along with the resource is returned. (optional)
     * @param  string $order_by Order results in ascending or descending order, by a specified field. (optional)
     * @param  string $top Retrieve the first x records in a list. (optional)
     * @param  string $skip Retrieve all records in a list, except for the first x records (optional)
     * @param  string $filter Retrieve all records matching a specified expression. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getSuppliersAsync($x_myobapi_key, $company_file_id, $x_myobapi_version = 'v2', $accept_encoding = 'gzip,deflate', $if_modified_since = null, $if_none_match = null, $order_by = null, $top = null, $skip = null, $filter = null)
    {
        return $this->getSuppliersAsyncWithHttpInfo($x_myobapi_key, $company_file_id, $x_myobapi_version, $accept_encoding, $if_modified_since, $if_none_match, $order_by, $top, $skip, $filter)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getSuppliersAsyncWithHttpInfo
     *
     * Fetch a list of all Suppliers
     *
     * @param  string $x_myobapi_key The API key registered in https://my.myob.com.au/au/bd/DevAppList.aspx (required)
     * @param  string $company_file_id The ID of the company in use (required)
     * @param  string $x_myobapi_version The version of the API, v2 is the current version (optional, default to 'v2')
     * @param  string $accept_encoding (optional, default to 'gzip,deflate')
     * @param  string $if_modified_since Only records created or modified since this timestamp will be returned (optional)
     * @param  string $if_none_match If the collection or individual resource hasn&#39;t been modified based on the request made, 304 Not Modified with an empty body is returned, if the resource has been modified 200 success code along with the resource is returned. (optional)
     * @param  string $order_by Order results in ascending or descending order, by a specified field. (optional)
     * @param  string $top Retrieve the first x records in a list. (optional)
     * @param  string $skip Retrieve all records in a list, except for the first x records (optional)
     * @param  string $filter Retrieve all records matching a specified expression. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getSuppliersAsyncWithHttpInfo($x_myobapi_key, $company_file_id, $x_myobapi_version = 'v2', $accept_encoding = 'gzip,deflate', $if_modified_since = null, $if_none_match = null, $order_by = null, $top = null, $skip = null, $filter = null)
    {
        $returnType = '\MyobAPI\MyobPHP\Model\ListOfSuppliers';
        $request = $this->getSuppliersRequest($x_myobapi_key, $company_file_id, $x_myobapi_version, $accept_encoding, $if_modified_since, $if_none_match, $order_by, $top, $skip, $filter);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getSuppliers'
     *
     * @param  string $x_myobapi_key The API key registered in https://my.myob.com.au/au/bd/DevAppList.aspx (required)
     * @param  string $company_file_id The ID of the company in use (required)
     * @param  string $x_myobapi_version The version of the API, v2 is the current version (optional, default to 'v2')
     * @param  string $accept_encoding (optional, default to 'gzip,deflate')
     * @param  string $if_modified_since Only records created or modified since this timestamp will be returned (optional)
     * @param  string $if_none_match If the collection or individual resource hasn&#39;t been modified based on the request made, 304 Not Modified with an empty body is returned, if the resource has been modified 200 success code along with the resource is returned. (optional)
     * @param  string $order_by Order results in ascending or descending order, by a specified field. (optional)
     * @param  string $top Retrieve the first x records in a list. (optional)
     * @param  string $skip Retrieve all records in a list, except for the first x records (optional)
     * @param  string $filter Retrieve all records matching a specified expression. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getSuppliersRequest($x_myobapi_key, $company_file_id, $x_myobapi_version = 'v2', $accept_encoding = 'gzip,deflate', $if_modified_since = null, $if_none_match = null, $order_by = null, $top = null, $skip = null, $filter = null)
    {
        // verify the required parameter 'x_myobapi_key' is set
        if ($x_myobapi_key === null || (is_array($x_myobapi_key) && count($x_myobapi_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_myobapi_key when calling getSuppliers'
            );
        }
        // verify the required parameter 'company_file_id' is set
        if ($company_file_id === null || (is_array($company_file_id) && count($company_file_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $company_file_id when calling getSuppliers'
            );
        }

        $resourcePath = '/{company_file_id}/Contact/Supplier';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($order_by !== null) {
            if('form' === 'form' && is_array($order_by)) {
                foreach($order_by as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['$orderBy'] = $order_by;
            }
        }
        // query params
        if ($top !== null) {
            if('form' === 'form' && is_array($top)) {
                foreach($top as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['$top'] = $top;
            }
        }
        // query params
        if ($skip !== null) {
            if('form' === 'form' && is_array($skip)) {
                foreach($skip as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['$skip'] = $skip;
            }
        }
        // query params
        if ($filter !== null) {
            if('form' === 'form' && is_array($filter)) {
                foreach($filter as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['$filter'] = $filter;
            }
        }

        // header params
        if ($x_myobapi_key !== null) {
            $headerParams['x-myobapi-key'] = ObjectSerializer::toHeaderValue($x_myobapi_key);
        }
        // header params
        if ($x_myobapi_version !== null) {
            $headerParams['x-myobapi-version'] = ObjectSerializer::toHeaderValue($x_myobapi_version);
        }
        // header params
        if ($accept_encoding !== null) {
            $headerParams['Accept-Encoding'] = ObjectSerializer::toHeaderValue($accept_encoding);
        }
        // header params
        if ($if_modified_since !== null) {
            $headerParams['If-Modified-Since'] = ObjectSerializer::toHeaderValue($if_modified_since);
        }
        // header params
        if ($if_none_match !== null) {
            $headerParams['If-None-Match'] = ObjectSerializer::toHeaderValue($if_none_match);
        }

        // path params
        if ($company_file_id !== null) {
            $resourcePath = str_replace(
                '{' . 'company_file_id' . '}',
                ObjectSerializer::toPathValue($company_file_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json; charset=utf-8']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json; charset=utf-8'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
