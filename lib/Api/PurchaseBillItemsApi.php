<?php
/**
 * PurchaseBillItemsApi
 * PHP version 5
 *
 * @category Class
 * @package  MyobAPI\MyobPHP
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * MYOB AccountRight
 *
 * MYOB AccountRight API file
 *
 * The version of the OpenAPI document: 1.0
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 4.3.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace MyobAPI\MyobPHP\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use MyobAPI\MyobPHP\ApiException;
use MyobAPI\MyobPHP\Configuration;
use MyobAPI\MyobPHP\HeaderSelector;
use MyobAPI\MyobPHP\ObjectSerializer;

/**
 * PurchaseBillItemsApi Class Doc Comment
 *
 * @category Class
 * @package  MyobAPI\MyobPHP
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class PurchaseBillItemsApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $host_index (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $host_index = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $host_index;
    }

    /**
     * Set the host index
     *
     * @param  int Host index (required)
     */
    public function setHostIndex($host_index)
    {
        $this->hostIndex = $host_index;
    }

    /**
     * Get the host index
     *
     * @return Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation createItemBill
     *
     * Create a new item bill
     *
     * @param  string $x_myobapi_key The API key registered in https://my.myob.com.au/au/bd/DevAppList.aspx (required)
     * @param  string $company_file_id The ID of the company in use (required)
     * @param  \MyobAPI\MyobPHP\Model\CreateItemBill $create_item_bill create_item_bill (required)
     * @param  string $x_myobapi_version The version of the API, v2 is the current version (optional, default to 'v2')
     * @param  string $accept_encoding accept_encoding (optional, default to 'gzip,deflate')
     *
     * @throws \MyobAPI\MyobPHP\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function createItemBill($x_myobapi_key, $company_file_id, $create_item_bill, $x_myobapi_version = 'v2', $accept_encoding = 'gzip,deflate')
    {
        $this->createItemBillWithHttpInfo($x_myobapi_key, $company_file_id, $create_item_bill, $x_myobapi_version, $accept_encoding);
    }

    /**
     * Operation createItemBillWithHttpInfo
     *
     * Create a new item bill
     *
     * @param  string $x_myobapi_key The API key registered in https://my.myob.com.au/au/bd/DevAppList.aspx (required)
     * @param  string $company_file_id The ID of the company in use (required)
     * @param  \MyobAPI\MyobPHP\Model\CreateItemBill $create_item_bill (required)
     * @param  string $x_myobapi_version The version of the API, v2 is the current version (optional, default to 'v2')
     * @param  string $accept_encoding (optional, default to 'gzip,deflate')
     *
     * @throws \MyobAPI\MyobPHP\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function createItemBillWithHttpInfo($x_myobapi_key, $company_file_id, $create_item_bill, $x_myobapi_version = 'v2', $accept_encoding = 'gzip,deflate')
    {
        $request = $this->createItemBillRequest($x_myobapi_key, $company_file_id, $create_item_bill, $x_myobapi_version, $accept_encoding);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation createItemBillAsync
     *
     * Create a new item bill
     *
     * @param  string $x_myobapi_key The API key registered in https://my.myob.com.au/au/bd/DevAppList.aspx (required)
     * @param  string $company_file_id The ID of the company in use (required)
     * @param  \MyobAPI\MyobPHP\Model\CreateItemBill $create_item_bill (required)
     * @param  string $x_myobapi_version The version of the API, v2 is the current version (optional, default to 'v2')
     * @param  string $accept_encoding (optional, default to 'gzip,deflate')
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createItemBillAsync($x_myobapi_key, $company_file_id, $create_item_bill, $x_myobapi_version = 'v2', $accept_encoding = 'gzip,deflate')
    {
        return $this->createItemBillAsyncWithHttpInfo($x_myobapi_key, $company_file_id, $create_item_bill, $x_myobapi_version, $accept_encoding)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createItemBillAsyncWithHttpInfo
     *
     * Create a new item bill
     *
     * @param  string $x_myobapi_key The API key registered in https://my.myob.com.au/au/bd/DevAppList.aspx (required)
     * @param  string $company_file_id The ID of the company in use (required)
     * @param  \MyobAPI\MyobPHP\Model\CreateItemBill $create_item_bill (required)
     * @param  string $x_myobapi_version The version of the API, v2 is the current version (optional, default to 'v2')
     * @param  string $accept_encoding (optional, default to 'gzip,deflate')
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createItemBillAsyncWithHttpInfo($x_myobapi_key, $company_file_id, $create_item_bill, $x_myobapi_version = 'v2', $accept_encoding = 'gzip,deflate')
    {
        $returnType = '';
        $request = $this->createItemBillRequest($x_myobapi_key, $company_file_id, $create_item_bill, $x_myobapi_version, $accept_encoding);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createItemBill'
     *
     * @param  string $x_myobapi_key The API key registered in https://my.myob.com.au/au/bd/DevAppList.aspx (required)
     * @param  string $company_file_id The ID of the company in use (required)
     * @param  \MyobAPI\MyobPHP\Model\CreateItemBill $create_item_bill (required)
     * @param  string $x_myobapi_version The version of the API, v2 is the current version (optional, default to 'v2')
     * @param  string $accept_encoding (optional, default to 'gzip,deflate')
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function createItemBillRequest($x_myobapi_key, $company_file_id, $create_item_bill, $x_myobapi_version = 'v2', $accept_encoding = 'gzip,deflate')
    {
        // verify the required parameter 'x_myobapi_key' is set
        if ($x_myobapi_key === null || (is_array($x_myobapi_key) && count($x_myobapi_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_myobapi_key when calling createItemBill'
            );
        }
        // verify the required parameter 'company_file_id' is set
        if ($company_file_id === null || (is_array($company_file_id) && count($company_file_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $company_file_id when calling createItemBill'
            );
        }
        // verify the required parameter 'create_item_bill' is set
        if ($create_item_bill === null || (is_array($create_item_bill) && count($create_item_bill) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $create_item_bill when calling createItemBill'
            );
        }

        $resourcePath = '/{company_file_id}/Purchase/Bill/Item';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($x_myobapi_key !== null) {
            $headerParams['x-myobapi-key'] = ObjectSerializer::toHeaderValue($x_myobapi_key);
        }
        // header params
        if ($x_myobapi_version !== null) {
            $headerParams['x-myobapi-version'] = ObjectSerializer::toHeaderValue($x_myobapi_version);
        }
        // header params
        if ($accept_encoding !== null) {
            $headerParams['Accept-Encoding'] = ObjectSerializer::toHeaderValue($accept_encoding);
        }

        // path params
        if ($company_file_id !== null) {
            $resourcePath = str_replace(
                '{' . 'company_file_id' . '}',
                ObjectSerializer::toPathValue($company_file_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($create_item_bill)) {
            $_tempBody = $create_item_bill;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteItemBill
     *
     * Delete an bill of item type
     *
     * @param  string $x_myobapi_key The API key registered in https://my.myob.com.au/au/bd/DevAppList.aspx (required)
     * @param  string $company_file_id The ID of the company in use (required)
     * @param  string $guid The GUID of the resource being created (required)
     * @param  \MyobAPI\MyobPHP\Model\DeleteItemBill $delete_item_bill delete_item_bill (required)
     * @param  string $x_myobapi_version The version of the API, v2 is the current version (optional, default to 'v2')
     * @param  string $accept_encoding accept_encoding (optional, default to 'gzip,deflate')
     *
     * @throws \MyobAPI\MyobPHP\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function deleteItemBill($x_myobapi_key, $company_file_id, $guid, $delete_item_bill, $x_myobapi_version = 'v2', $accept_encoding = 'gzip,deflate')
    {
        $this->deleteItemBillWithHttpInfo($x_myobapi_key, $company_file_id, $guid, $delete_item_bill, $x_myobapi_version, $accept_encoding);
    }

    /**
     * Operation deleteItemBillWithHttpInfo
     *
     * Delete an bill of item type
     *
     * @param  string $x_myobapi_key The API key registered in https://my.myob.com.au/au/bd/DevAppList.aspx (required)
     * @param  string $company_file_id The ID of the company in use (required)
     * @param  string $guid The GUID of the resource being created (required)
     * @param  \MyobAPI\MyobPHP\Model\DeleteItemBill $delete_item_bill (required)
     * @param  string $x_myobapi_version The version of the API, v2 is the current version (optional, default to 'v2')
     * @param  string $accept_encoding (optional, default to 'gzip,deflate')
     *
     * @throws \MyobAPI\MyobPHP\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteItemBillWithHttpInfo($x_myobapi_key, $company_file_id, $guid, $delete_item_bill, $x_myobapi_version = 'v2', $accept_encoding = 'gzip,deflate')
    {
        $request = $this->deleteItemBillRequest($x_myobapi_key, $company_file_id, $guid, $delete_item_bill, $x_myobapi_version, $accept_encoding);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation deleteItemBillAsync
     *
     * Delete an bill of item type
     *
     * @param  string $x_myobapi_key The API key registered in https://my.myob.com.au/au/bd/DevAppList.aspx (required)
     * @param  string $company_file_id The ID of the company in use (required)
     * @param  string $guid The GUID of the resource being created (required)
     * @param  \MyobAPI\MyobPHP\Model\DeleteItemBill $delete_item_bill (required)
     * @param  string $x_myobapi_version The version of the API, v2 is the current version (optional, default to 'v2')
     * @param  string $accept_encoding (optional, default to 'gzip,deflate')
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteItemBillAsync($x_myobapi_key, $company_file_id, $guid, $delete_item_bill, $x_myobapi_version = 'v2', $accept_encoding = 'gzip,deflate')
    {
        return $this->deleteItemBillAsyncWithHttpInfo($x_myobapi_key, $company_file_id, $guid, $delete_item_bill, $x_myobapi_version, $accept_encoding)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteItemBillAsyncWithHttpInfo
     *
     * Delete an bill of item type
     *
     * @param  string $x_myobapi_key The API key registered in https://my.myob.com.au/au/bd/DevAppList.aspx (required)
     * @param  string $company_file_id The ID of the company in use (required)
     * @param  string $guid The GUID of the resource being created (required)
     * @param  \MyobAPI\MyobPHP\Model\DeleteItemBill $delete_item_bill (required)
     * @param  string $x_myobapi_version The version of the API, v2 is the current version (optional, default to 'v2')
     * @param  string $accept_encoding (optional, default to 'gzip,deflate')
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteItemBillAsyncWithHttpInfo($x_myobapi_key, $company_file_id, $guid, $delete_item_bill, $x_myobapi_version = 'v2', $accept_encoding = 'gzip,deflate')
    {
        $returnType = '';
        $request = $this->deleteItemBillRequest($x_myobapi_key, $company_file_id, $guid, $delete_item_bill, $x_myobapi_version, $accept_encoding);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteItemBill'
     *
     * @param  string $x_myobapi_key The API key registered in https://my.myob.com.au/au/bd/DevAppList.aspx (required)
     * @param  string $company_file_id The ID of the company in use (required)
     * @param  string $guid The GUID of the resource being created (required)
     * @param  \MyobAPI\MyobPHP\Model\DeleteItemBill $delete_item_bill (required)
     * @param  string $x_myobapi_version The version of the API, v2 is the current version (optional, default to 'v2')
     * @param  string $accept_encoding (optional, default to 'gzip,deflate')
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deleteItemBillRequest($x_myobapi_key, $company_file_id, $guid, $delete_item_bill, $x_myobapi_version = 'v2', $accept_encoding = 'gzip,deflate')
    {
        // verify the required parameter 'x_myobapi_key' is set
        if ($x_myobapi_key === null || (is_array($x_myobapi_key) && count($x_myobapi_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_myobapi_key when calling deleteItemBill'
            );
        }
        // verify the required parameter 'company_file_id' is set
        if ($company_file_id === null || (is_array($company_file_id) && count($company_file_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $company_file_id when calling deleteItemBill'
            );
        }
        // verify the required parameter 'guid' is set
        if ($guid === null || (is_array($guid) && count($guid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $guid when calling deleteItemBill'
            );
        }
        // verify the required parameter 'delete_item_bill' is set
        if ($delete_item_bill === null || (is_array($delete_item_bill) && count($delete_item_bill) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $delete_item_bill when calling deleteItemBill'
            );
        }

        $resourcePath = '/{company_file_id}/Purchase/Bill/Item/{guid}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($x_myobapi_key !== null) {
            $headerParams['x-myobapi-key'] = ObjectSerializer::toHeaderValue($x_myobapi_key);
        }
        // header params
        if ($x_myobapi_version !== null) {
            $headerParams['x-myobapi-version'] = ObjectSerializer::toHeaderValue($x_myobapi_version);
        }
        // header params
        if ($accept_encoding !== null) {
            $headerParams['Accept-Encoding'] = ObjectSerializer::toHeaderValue($accept_encoding);
        }

        // path params
        if ($company_file_id !== null) {
            $resourcePath = str_replace(
                '{' . 'company_file_id' . '}',
                ObjectSerializer::toPathValue($company_file_id),
                $resourcePath
            );
        }
        // path params
        if ($guid !== null) {
            $resourcePath = str_replace(
                '{' . 'guid' . '}',
                ObjectSerializer::toPathValue($guid),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($delete_item_bill)) {
            $_tempBody = $delete_item_bill;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation editItemBill
     *
     * Update a new item type bill
     *
     * @param  string $x_myobapi_key The API key registered in https://my.myob.com.au/au/bd/DevAppList.aspx (required)
     * @param  string $company_file_id The ID of the company in use (required)
     * @param  string $guid The GUID of the resource being created (required)
     * @param  \MyobAPI\MyobPHP\Model\EditItemBill $edit_item_bill edit_item_bill (required)
     * @param  string $x_myobapi_version The version of the API, v2 is the current version (optional, default to 'v2')
     * @param  string $accept_encoding accept_encoding (optional, default to 'gzip,deflate')
     *
     * @throws \MyobAPI\MyobPHP\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function editItemBill($x_myobapi_key, $company_file_id, $guid, $edit_item_bill, $x_myobapi_version = 'v2', $accept_encoding = 'gzip,deflate')
    {
        $this->editItemBillWithHttpInfo($x_myobapi_key, $company_file_id, $guid, $edit_item_bill, $x_myobapi_version, $accept_encoding);
    }

    /**
     * Operation editItemBillWithHttpInfo
     *
     * Update a new item type bill
     *
     * @param  string $x_myobapi_key The API key registered in https://my.myob.com.au/au/bd/DevAppList.aspx (required)
     * @param  string $company_file_id The ID of the company in use (required)
     * @param  string $guid The GUID of the resource being created (required)
     * @param  \MyobAPI\MyobPHP\Model\EditItemBill $edit_item_bill (required)
     * @param  string $x_myobapi_version The version of the API, v2 is the current version (optional, default to 'v2')
     * @param  string $accept_encoding (optional, default to 'gzip,deflate')
     *
     * @throws \MyobAPI\MyobPHP\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function editItemBillWithHttpInfo($x_myobapi_key, $company_file_id, $guid, $edit_item_bill, $x_myobapi_version = 'v2', $accept_encoding = 'gzip,deflate')
    {
        $request = $this->editItemBillRequest($x_myobapi_key, $company_file_id, $guid, $edit_item_bill, $x_myobapi_version, $accept_encoding);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation editItemBillAsync
     *
     * Update a new item type bill
     *
     * @param  string $x_myobapi_key The API key registered in https://my.myob.com.au/au/bd/DevAppList.aspx (required)
     * @param  string $company_file_id The ID of the company in use (required)
     * @param  string $guid The GUID of the resource being created (required)
     * @param  \MyobAPI\MyobPHP\Model\EditItemBill $edit_item_bill (required)
     * @param  string $x_myobapi_version The version of the API, v2 is the current version (optional, default to 'v2')
     * @param  string $accept_encoding (optional, default to 'gzip,deflate')
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function editItemBillAsync($x_myobapi_key, $company_file_id, $guid, $edit_item_bill, $x_myobapi_version = 'v2', $accept_encoding = 'gzip,deflate')
    {
        return $this->editItemBillAsyncWithHttpInfo($x_myobapi_key, $company_file_id, $guid, $edit_item_bill, $x_myobapi_version, $accept_encoding)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation editItemBillAsyncWithHttpInfo
     *
     * Update a new item type bill
     *
     * @param  string $x_myobapi_key The API key registered in https://my.myob.com.au/au/bd/DevAppList.aspx (required)
     * @param  string $company_file_id The ID of the company in use (required)
     * @param  string $guid The GUID of the resource being created (required)
     * @param  \MyobAPI\MyobPHP\Model\EditItemBill $edit_item_bill (required)
     * @param  string $x_myobapi_version The version of the API, v2 is the current version (optional, default to 'v2')
     * @param  string $accept_encoding (optional, default to 'gzip,deflate')
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function editItemBillAsyncWithHttpInfo($x_myobapi_key, $company_file_id, $guid, $edit_item_bill, $x_myobapi_version = 'v2', $accept_encoding = 'gzip,deflate')
    {
        $returnType = '';
        $request = $this->editItemBillRequest($x_myobapi_key, $company_file_id, $guid, $edit_item_bill, $x_myobapi_version, $accept_encoding);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'editItemBill'
     *
     * @param  string $x_myobapi_key The API key registered in https://my.myob.com.au/au/bd/DevAppList.aspx (required)
     * @param  string $company_file_id The ID of the company in use (required)
     * @param  string $guid The GUID of the resource being created (required)
     * @param  \MyobAPI\MyobPHP\Model\EditItemBill $edit_item_bill (required)
     * @param  string $x_myobapi_version The version of the API, v2 is the current version (optional, default to 'v2')
     * @param  string $accept_encoding (optional, default to 'gzip,deflate')
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function editItemBillRequest($x_myobapi_key, $company_file_id, $guid, $edit_item_bill, $x_myobapi_version = 'v2', $accept_encoding = 'gzip,deflate')
    {
        // verify the required parameter 'x_myobapi_key' is set
        if ($x_myobapi_key === null || (is_array($x_myobapi_key) && count($x_myobapi_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_myobapi_key when calling editItemBill'
            );
        }
        // verify the required parameter 'company_file_id' is set
        if ($company_file_id === null || (is_array($company_file_id) && count($company_file_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $company_file_id when calling editItemBill'
            );
        }
        // verify the required parameter 'guid' is set
        if ($guid === null || (is_array($guid) && count($guid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $guid when calling editItemBill'
            );
        }
        // verify the required parameter 'edit_item_bill' is set
        if ($edit_item_bill === null || (is_array($edit_item_bill) && count($edit_item_bill) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $edit_item_bill when calling editItemBill'
            );
        }

        $resourcePath = '/{company_file_id}/Purchase/Bill/Item/{guid}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($x_myobapi_key !== null) {
            $headerParams['x-myobapi-key'] = ObjectSerializer::toHeaderValue($x_myobapi_key);
        }
        // header params
        if ($x_myobapi_version !== null) {
            $headerParams['x-myobapi-version'] = ObjectSerializer::toHeaderValue($x_myobapi_version);
        }
        // header params
        if ($accept_encoding !== null) {
            $headerParams['Accept-Encoding'] = ObjectSerializer::toHeaderValue($accept_encoding);
        }

        // path params
        if ($company_file_id !== null) {
            $resourcePath = str_replace(
                '{' . 'company_file_id' . '}',
                ObjectSerializer::toPathValue($company_file_id),
                $resourcePath
            );
        }
        // path params
        if ($guid !== null) {
            $resourcePath = str_replace(
                '{' . 'guid' . '}',
                ObjectSerializer::toPathValue($guid),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($edit_item_bill)) {
            $_tempBody = $edit_item_bill;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getItemBill
     *
     * Get one Bill Item by GUID
     *
     * @param  string $x_myobapi_key The API key registered in https://my.myob.com.au/au/bd/DevAppList.aspx (required)
     * @param  string $company_file_id The ID of the company in use (required)
     * @param  string $guid The GUID of the resource being created (required)
     * @param  string $x_myobapi_version The version of the API, v2 is the current version (optional, default to 'v2')
     * @param  string $accept_encoding accept_encoding (optional, default to 'gzip,deflate')
     *
     * @throws \MyobAPI\MyobPHP\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \MyobAPI\MyobPHP\Model\ItemBill
     */
    public function getItemBill($x_myobapi_key, $company_file_id, $guid, $x_myobapi_version = 'v2', $accept_encoding = 'gzip,deflate')
    {
        list($response) = $this->getItemBillWithHttpInfo($x_myobapi_key, $company_file_id, $guid, $x_myobapi_version, $accept_encoding);
        return $response;
    }

    /**
     * Operation getItemBillWithHttpInfo
     *
     * Get one Bill Item by GUID
     *
     * @param  string $x_myobapi_key The API key registered in https://my.myob.com.au/au/bd/DevAppList.aspx (required)
     * @param  string $company_file_id The ID of the company in use (required)
     * @param  string $guid The GUID of the resource being created (required)
     * @param  string $x_myobapi_version The version of the API, v2 is the current version (optional, default to 'v2')
     * @param  string $accept_encoding (optional, default to 'gzip,deflate')
     *
     * @throws \MyobAPI\MyobPHP\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \MyobAPI\MyobPHP\Model\ItemBill, HTTP status code, HTTP response headers (array of strings)
     */
    public function getItemBillWithHttpInfo($x_myobapi_key, $company_file_id, $guid, $x_myobapi_version = 'v2', $accept_encoding = 'gzip,deflate')
    {
        $request = $this->getItemBillRequest($x_myobapi_key, $company_file_id, $guid, $x_myobapi_version, $accept_encoding);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\MyobAPI\MyobPHP\Model\ItemBill' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\MyobAPI\MyobPHP\Model\ItemBill', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\MyobAPI\MyobPHP\Model\ItemBill';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MyobAPI\MyobPHP\Model\ItemBill',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getItemBillAsync
     *
     * Get one Bill Item by GUID
     *
     * @param  string $x_myobapi_key The API key registered in https://my.myob.com.au/au/bd/DevAppList.aspx (required)
     * @param  string $company_file_id The ID of the company in use (required)
     * @param  string $guid The GUID of the resource being created (required)
     * @param  string $x_myobapi_version The version of the API, v2 is the current version (optional, default to 'v2')
     * @param  string $accept_encoding (optional, default to 'gzip,deflate')
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getItemBillAsync($x_myobapi_key, $company_file_id, $guid, $x_myobapi_version = 'v2', $accept_encoding = 'gzip,deflate')
    {
        return $this->getItemBillAsyncWithHttpInfo($x_myobapi_key, $company_file_id, $guid, $x_myobapi_version, $accept_encoding)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getItemBillAsyncWithHttpInfo
     *
     * Get one Bill Item by GUID
     *
     * @param  string $x_myobapi_key The API key registered in https://my.myob.com.au/au/bd/DevAppList.aspx (required)
     * @param  string $company_file_id The ID of the company in use (required)
     * @param  string $guid The GUID of the resource being created (required)
     * @param  string $x_myobapi_version The version of the API, v2 is the current version (optional, default to 'v2')
     * @param  string $accept_encoding (optional, default to 'gzip,deflate')
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getItemBillAsyncWithHttpInfo($x_myobapi_key, $company_file_id, $guid, $x_myobapi_version = 'v2', $accept_encoding = 'gzip,deflate')
    {
        $returnType = '\MyobAPI\MyobPHP\Model\ItemBill';
        $request = $this->getItemBillRequest($x_myobapi_key, $company_file_id, $guid, $x_myobapi_version, $accept_encoding);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getItemBill'
     *
     * @param  string $x_myobapi_key The API key registered in https://my.myob.com.au/au/bd/DevAppList.aspx (required)
     * @param  string $company_file_id The ID of the company in use (required)
     * @param  string $guid The GUID of the resource being created (required)
     * @param  string $x_myobapi_version The version of the API, v2 is the current version (optional, default to 'v2')
     * @param  string $accept_encoding (optional, default to 'gzip,deflate')
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getItemBillRequest($x_myobapi_key, $company_file_id, $guid, $x_myobapi_version = 'v2', $accept_encoding = 'gzip,deflate')
    {
        // verify the required parameter 'x_myobapi_key' is set
        if ($x_myobapi_key === null || (is_array($x_myobapi_key) && count($x_myobapi_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_myobapi_key when calling getItemBill'
            );
        }
        // verify the required parameter 'company_file_id' is set
        if ($company_file_id === null || (is_array($company_file_id) && count($company_file_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $company_file_id when calling getItemBill'
            );
        }
        // verify the required parameter 'guid' is set
        if ($guid === null || (is_array($guid) && count($guid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $guid when calling getItemBill'
            );
        }

        $resourcePath = '/{company_file_id}/Purchase/Bill/Item/{guid}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($x_myobapi_key !== null) {
            $headerParams['x-myobapi-key'] = ObjectSerializer::toHeaderValue($x_myobapi_key);
        }
        // header params
        if ($x_myobapi_version !== null) {
            $headerParams['x-myobapi-version'] = ObjectSerializer::toHeaderValue($x_myobapi_version);
        }
        // header params
        if ($accept_encoding !== null) {
            $headerParams['Accept-Encoding'] = ObjectSerializer::toHeaderValue($accept_encoding);
        }

        // path params
        if ($company_file_id !== null) {
            $resourcePath = str_replace(
                '{' . 'company_file_id' . '}',
                ObjectSerializer::toPathValue($company_file_id),
                $resourcePath
            );
        }
        // path params
        if ($guid !== null) {
            $resourcePath = str_replace(
                '{' . 'guid' . '}',
                ObjectSerializer::toPathValue($guid),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json; charset=utf-8']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json; charset=utf-8'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getItemBills
     *
     * List all the Item bills
     *
     * @param  string $x_myobapi_key The API key registered in https://my.myob.com.au/au/bd/DevAppList.aspx (required)
     * @param  string $company_file_id The ID of the company in use (required)
     * @param  string $x_myobapi_version The version of the API, v2 is the current version (optional, default to 'v2')
     * @param  string $accept_encoding accept_encoding (optional, default to 'gzip,deflate')
     * @param  string $if_modified_since Only records created or modified since this timestamp will be returned (optional)
     * @param  string $if_none_match If the collection or individual resource hasn&#39;t been modified based on the request made, 304 Not Modified with an empty body is returned, if the resource has been modified 200 success code along with the resource is returned. (optional)
     * @param  string $order_by Order results in ascending or descending order, by a specified field. (optional)
     * @param  string $top Retrieve the first x records in a list. (optional)
     * @param  string $skip Retrieve all records in a list, except for the first x records (optional)
     * @param  string $filter Retrieve all records matching a specified expression. (optional)
     *
     * @throws \MyobAPI\MyobPHP\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \MyobAPI\MyobPHP\Model\GetItemBills
     */
    public function getItemBills($x_myobapi_key, $company_file_id, $x_myobapi_version = 'v2', $accept_encoding = 'gzip,deflate', $if_modified_since = null, $if_none_match = null, $order_by = null, $top = null, $skip = null, $filter = null)
    {
        list($response) = $this->getItemBillsWithHttpInfo($x_myobapi_key, $company_file_id, $x_myobapi_version, $accept_encoding, $if_modified_since, $if_none_match, $order_by, $top, $skip, $filter);
        return $response;
    }

    /**
     * Operation getItemBillsWithHttpInfo
     *
     * List all the Item bills
     *
     * @param  string $x_myobapi_key The API key registered in https://my.myob.com.au/au/bd/DevAppList.aspx (required)
     * @param  string $company_file_id The ID of the company in use (required)
     * @param  string $x_myobapi_version The version of the API, v2 is the current version (optional, default to 'v2')
     * @param  string $accept_encoding (optional, default to 'gzip,deflate')
     * @param  string $if_modified_since Only records created or modified since this timestamp will be returned (optional)
     * @param  string $if_none_match If the collection or individual resource hasn&#39;t been modified based on the request made, 304 Not Modified with an empty body is returned, if the resource has been modified 200 success code along with the resource is returned. (optional)
     * @param  string $order_by Order results in ascending or descending order, by a specified field. (optional)
     * @param  string $top Retrieve the first x records in a list. (optional)
     * @param  string $skip Retrieve all records in a list, except for the first x records (optional)
     * @param  string $filter Retrieve all records matching a specified expression. (optional)
     *
     * @throws \MyobAPI\MyobPHP\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \MyobAPI\MyobPHP\Model\GetItemBills, HTTP status code, HTTP response headers (array of strings)
     */
    public function getItemBillsWithHttpInfo($x_myobapi_key, $company_file_id, $x_myobapi_version = 'v2', $accept_encoding = 'gzip,deflate', $if_modified_since = null, $if_none_match = null, $order_by = null, $top = null, $skip = null, $filter = null)
    {
        $request = $this->getItemBillsRequest($x_myobapi_key, $company_file_id, $x_myobapi_version, $accept_encoding, $if_modified_since, $if_none_match, $order_by, $top, $skip, $filter);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\MyobAPI\MyobPHP\Model\GetItemBills' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\MyobAPI\MyobPHP\Model\GetItemBills', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\MyobAPI\MyobPHP\Model\GetItemBills';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MyobAPI\MyobPHP\Model\GetItemBills',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getItemBillsAsync
     *
     * List all the Item bills
     *
     * @param  string $x_myobapi_key The API key registered in https://my.myob.com.au/au/bd/DevAppList.aspx (required)
     * @param  string $company_file_id The ID of the company in use (required)
     * @param  string $x_myobapi_version The version of the API, v2 is the current version (optional, default to 'v2')
     * @param  string $accept_encoding (optional, default to 'gzip,deflate')
     * @param  string $if_modified_since Only records created or modified since this timestamp will be returned (optional)
     * @param  string $if_none_match If the collection or individual resource hasn&#39;t been modified based on the request made, 304 Not Modified with an empty body is returned, if the resource has been modified 200 success code along with the resource is returned. (optional)
     * @param  string $order_by Order results in ascending or descending order, by a specified field. (optional)
     * @param  string $top Retrieve the first x records in a list. (optional)
     * @param  string $skip Retrieve all records in a list, except for the first x records (optional)
     * @param  string $filter Retrieve all records matching a specified expression. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getItemBillsAsync($x_myobapi_key, $company_file_id, $x_myobapi_version = 'v2', $accept_encoding = 'gzip,deflate', $if_modified_since = null, $if_none_match = null, $order_by = null, $top = null, $skip = null, $filter = null)
    {
        return $this->getItemBillsAsyncWithHttpInfo($x_myobapi_key, $company_file_id, $x_myobapi_version, $accept_encoding, $if_modified_since, $if_none_match, $order_by, $top, $skip, $filter)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getItemBillsAsyncWithHttpInfo
     *
     * List all the Item bills
     *
     * @param  string $x_myobapi_key The API key registered in https://my.myob.com.au/au/bd/DevAppList.aspx (required)
     * @param  string $company_file_id The ID of the company in use (required)
     * @param  string $x_myobapi_version The version of the API, v2 is the current version (optional, default to 'v2')
     * @param  string $accept_encoding (optional, default to 'gzip,deflate')
     * @param  string $if_modified_since Only records created or modified since this timestamp will be returned (optional)
     * @param  string $if_none_match If the collection or individual resource hasn&#39;t been modified based on the request made, 304 Not Modified with an empty body is returned, if the resource has been modified 200 success code along with the resource is returned. (optional)
     * @param  string $order_by Order results in ascending or descending order, by a specified field. (optional)
     * @param  string $top Retrieve the first x records in a list. (optional)
     * @param  string $skip Retrieve all records in a list, except for the first x records (optional)
     * @param  string $filter Retrieve all records matching a specified expression. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getItemBillsAsyncWithHttpInfo($x_myobapi_key, $company_file_id, $x_myobapi_version = 'v2', $accept_encoding = 'gzip,deflate', $if_modified_since = null, $if_none_match = null, $order_by = null, $top = null, $skip = null, $filter = null)
    {
        $returnType = '\MyobAPI\MyobPHP\Model\GetItemBills';
        $request = $this->getItemBillsRequest($x_myobapi_key, $company_file_id, $x_myobapi_version, $accept_encoding, $if_modified_since, $if_none_match, $order_by, $top, $skip, $filter);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getItemBills'
     *
     * @param  string $x_myobapi_key The API key registered in https://my.myob.com.au/au/bd/DevAppList.aspx (required)
     * @param  string $company_file_id The ID of the company in use (required)
     * @param  string $x_myobapi_version The version of the API, v2 is the current version (optional, default to 'v2')
     * @param  string $accept_encoding (optional, default to 'gzip,deflate')
     * @param  string $if_modified_since Only records created or modified since this timestamp will be returned (optional)
     * @param  string $if_none_match If the collection or individual resource hasn&#39;t been modified based on the request made, 304 Not Modified with an empty body is returned, if the resource has been modified 200 success code along with the resource is returned. (optional)
     * @param  string $order_by Order results in ascending or descending order, by a specified field. (optional)
     * @param  string $top Retrieve the first x records in a list. (optional)
     * @param  string $skip Retrieve all records in a list, except for the first x records (optional)
     * @param  string $filter Retrieve all records matching a specified expression. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getItemBillsRequest($x_myobapi_key, $company_file_id, $x_myobapi_version = 'v2', $accept_encoding = 'gzip,deflate', $if_modified_since = null, $if_none_match = null, $order_by = null, $top = null, $skip = null, $filter = null)
    {
        // verify the required parameter 'x_myobapi_key' is set
        if ($x_myobapi_key === null || (is_array($x_myobapi_key) && count($x_myobapi_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_myobapi_key when calling getItemBills'
            );
        }
        // verify the required parameter 'company_file_id' is set
        if ($company_file_id === null || (is_array($company_file_id) && count($company_file_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $company_file_id when calling getItemBills'
            );
        }

        $resourcePath = '/{company_file_id}/Purchase/Bill/Item';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($order_by !== null) {
            if('form' === 'form' && is_array($order_by)) {
                foreach($order_by as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['$orderBy'] = $order_by;
            }
        }
        // query params
        if ($top !== null) {
            if('form' === 'form' && is_array($top)) {
                foreach($top as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['$top'] = $top;
            }
        }
        // query params
        if ($skip !== null) {
            if('form' === 'form' && is_array($skip)) {
                foreach($skip as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['$skip'] = $skip;
            }
        }
        // query params
        if ($filter !== null) {
            if('form' === 'form' && is_array($filter)) {
                foreach($filter as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['$filter'] = $filter;
            }
        }

        // header params
        if ($x_myobapi_key !== null) {
            $headerParams['x-myobapi-key'] = ObjectSerializer::toHeaderValue($x_myobapi_key);
        }
        // header params
        if ($x_myobapi_version !== null) {
            $headerParams['x-myobapi-version'] = ObjectSerializer::toHeaderValue($x_myobapi_version);
        }
        // header params
        if ($accept_encoding !== null) {
            $headerParams['Accept-Encoding'] = ObjectSerializer::toHeaderValue($accept_encoding);
        }
        // header params
        if ($if_modified_since !== null) {
            $headerParams['If-Modified-Since'] = ObjectSerializer::toHeaderValue($if_modified_since);
        }
        // header params
        if ($if_none_match !== null) {
            $headerParams['If-None-Match'] = ObjectSerializer::toHeaderValue($if_none_match);
        }

        // path params
        if ($company_file_id !== null) {
            $resourcePath = str_replace(
                '{' . 'company_file_id' . '}',
                ObjectSerializer::toPathValue($company_file_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
