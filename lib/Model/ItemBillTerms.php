<?php
/**
 * ItemBillTerms
 *
 * PHP version 5
 *
 * @category Class
 * @package  MyobAPI\MyobPHP
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * MYOB AccountRight
 *
 * MYOB AccountRight API file
 *
 * The version of the OpenAPI document: 1.0
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 4.3.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace MyobAPI\MyobPHP\Model;

use \ArrayAccess;
use \MyobAPI\MyobPHP\ObjectSerializer;

/**
 * ItemBillTerms Class Doc Comment
 *
 * @category Class
 * @package  MyobAPI\MyobPHP
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class ItemBillTerms implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'ItemBillTerms';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'payment_is_due' => 'string',
        'discount_date' => 'int',
        'balance_due_date' => 'int',
        'discount_for_early_payment' => 'float',
        'monthly_charge_for_late_payment' => 'float',
        'discount_expiry_date' => 'string',
        'discount' => 'float',
        'discount_foreign' => 'string',
        'due_date' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'payment_is_due' => null,
        'discount_date' => 'int32',
        'balance_due_date' => 'int32',
        'discount_for_early_payment' => null,
        'monthly_charge_for_late_payment' => null,
        'discount_expiry_date' => null,
        'discount' => null,
        'discount_foreign' => null,
        'due_date' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'payment_is_due' => 'PaymentIsDue',
        'discount_date' => 'DiscountDate',
        'balance_due_date' => 'BalanceDueDate',
        'discount_for_early_payment' => 'DiscountForEarlyPayment',
        'monthly_charge_for_late_payment' => 'MonthlyChargeForLatePayment',
        'discount_expiry_date' => 'DiscountExpiryDate',
        'discount' => 'Discount',
        'discount_foreign' => 'DiscountForeign',
        'due_date' => 'DueDate'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'payment_is_due' => 'setPaymentIsDue',
        'discount_date' => 'setDiscountDate',
        'balance_due_date' => 'setBalanceDueDate',
        'discount_for_early_payment' => 'setDiscountForEarlyPayment',
        'monthly_charge_for_late_payment' => 'setMonthlyChargeForLatePayment',
        'discount_expiry_date' => 'setDiscountExpiryDate',
        'discount' => 'setDiscount',
        'discount_foreign' => 'setDiscountForeign',
        'due_date' => 'setDueDate'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'payment_is_due' => 'getPaymentIsDue',
        'discount_date' => 'getDiscountDate',
        'balance_due_date' => 'getBalanceDueDate',
        'discount_for_early_payment' => 'getDiscountForEarlyPayment',
        'monthly_charge_for_late_payment' => 'getMonthlyChargeForLatePayment',
        'discount_expiry_date' => 'getDiscountExpiryDate',
        'discount' => 'getDiscount',
        'discount_foreign' => 'getDiscountForeign',
        'due_date' => 'getDueDate'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['payment_is_due'] = isset($data['payment_is_due']) ? $data['payment_is_due'] : null;
        $this->container['discount_date'] = isset($data['discount_date']) ? $data['discount_date'] : null;
        $this->container['balance_due_date'] = isset($data['balance_due_date']) ? $data['balance_due_date'] : null;
        $this->container['discount_for_early_payment'] = isset($data['discount_for_early_payment']) ? $data['discount_for_early_payment'] : null;
        $this->container['monthly_charge_for_late_payment'] = isset($data['monthly_charge_for_late_payment']) ? $data['monthly_charge_for_late_payment'] : null;
        $this->container['discount_expiry_date'] = isset($data['discount_expiry_date']) ? $data['discount_expiry_date'] : null;
        $this->container['discount'] = isset($data['discount']) ? $data['discount'] : null;
        $this->container['discount_foreign'] = isset($data['discount_foreign']) ? $data['discount_foreign'] : null;
        $this->container['due_date'] = isset($data['due_date']) ? $data['due_date'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets payment_is_due
     *
     * @return string|null
     */
    public function getPaymentIsDue()
    {
        return $this->container['payment_is_due'];
    }

    /**
     * Sets payment_is_due
     *
     * @param string|null $payment_is_due payment_is_due
     *
     * @return $this
     */
    public function setPaymentIsDue($payment_is_due)
    {
        $this->container['payment_is_due'] = $payment_is_due;

        return $this;
    }

    /**
     * Gets discount_date
     *
     * @return int|null
     */
    public function getDiscountDate()
    {
        return $this->container['discount_date'];
    }

    /**
     * Sets discount_date
     *
     * @param int|null $discount_date discount_date
     *
     * @return $this
     */
    public function setDiscountDate($discount_date)
    {
        $this->container['discount_date'] = $discount_date;

        return $this;
    }

    /**
     * Gets balance_due_date
     *
     * @return int|null
     */
    public function getBalanceDueDate()
    {
        return $this->container['balance_due_date'];
    }

    /**
     * Sets balance_due_date
     *
     * @param int|null $balance_due_date balance_due_date
     *
     * @return $this
     */
    public function setBalanceDueDate($balance_due_date)
    {
        $this->container['balance_due_date'] = $balance_due_date;

        return $this;
    }

    /**
     * Gets discount_for_early_payment
     *
     * @return float|null
     */
    public function getDiscountForEarlyPayment()
    {
        return $this->container['discount_for_early_payment'];
    }

    /**
     * Sets discount_for_early_payment
     *
     * @param float|null $discount_for_early_payment discount_for_early_payment
     *
     * @return $this
     */
    public function setDiscountForEarlyPayment($discount_for_early_payment)
    {
        $this->container['discount_for_early_payment'] = $discount_for_early_payment;

        return $this;
    }

    /**
     * Gets monthly_charge_for_late_payment
     *
     * @return float|null
     */
    public function getMonthlyChargeForLatePayment()
    {
        return $this->container['monthly_charge_for_late_payment'];
    }

    /**
     * Sets monthly_charge_for_late_payment
     *
     * @param float|null $monthly_charge_for_late_payment monthly_charge_for_late_payment
     *
     * @return $this
     */
    public function setMonthlyChargeForLatePayment($monthly_charge_for_late_payment)
    {
        $this->container['monthly_charge_for_late_payment'] = $monthly_charge_for_late_payment;

        return $this;
    }

    /**
     * Gets discount_expiry_date
     *
     * @return string|null
     */
    public function getDiscountExpiryDate()
    {
        return $this->container['discount_expiry_date'];
    }

    /**
     * Sets discount_expiry_date
     *
     * @param string|null $discount_expiry_date discount_expiry_date
     *
     * @return $this
     */
    public function setDiscountExpiryDate($discount_expiry_date)
    {
        $this->container['discount_expiry_date'] = $discount_expiry_date;

        return $this;
    }

    /**
     * Gets discount
     *
     * @return float|null
     */
    public function getDiscount()
    {
        return $this->container['discount'];
    }

    /**
     * Sets discount
     *
     * @param float|null $discount discount
     *
     * @return $this
     */
    public function setDiscount($discount)
    {
        $this->container['discount'] = $discount;

        return $this;
    }

    /**
     * Gets discount_foreign
     *
     * @return string|null
     */
    public function getDiscountForeign()
    {
        return $this->container['discount_foreign'];
    }

    /**
     * Sets discount_foreign
     *
     * @param string|null $discount_foreign discount_foreign
     *
     * @return $this
     */
    public function setDiscountForeign($discount_foreign)
    {
        $this->container['discount_foreign'] = $discount_foreign;

        return $this;
    }

    /**
     * Gets due_date
     *
     * @return string|null
     */
    public function getDueDate()
    {
        return $this->container['due_date'];
    }

    /**
     * Sets due_date
     *
     * @param string|null $due_date due_date
     *
     * @return $this
     */
    public function setDueDate($due_date)
    {
        $this->container['due_date'] = $due_date;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


