<?php
/**
 * TaxCodeExtended
 *
 * PHP version 5
 *
 * @category Class
 * @package  MyobAPI\MyobPHP
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * MYOB AccountRight
 *
 * MYOB AccountRight API file
 *
 * The version of the OpenAPI document: 1.0
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 4.3.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace MyobAPI\MyobPHP\Model;

use \ArrayAccess;
use \MyobAPI\MyobPHP\ObjectSerializer;

/**
 * TaxCodeExtended Class Doc Comment
 *
 * @category Class
 * @package  MyobAPI\MyobPHP
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class TaxCodeExtended implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'TaxCodeExtended';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'uid' => 'string',
        'code' => 'string',
        'description' => 'string',
        'type' => 'string',
        'rate' => 'float',
        'is_rate_negative' => 'bool',
        'tax_collected_account' => '\MyobAPI\MyobPHP\Model\TaxCollectedAccount',
        'tax_paid_account' => '\MyobAPI\MyobPHP\Model\TaxPaidAccount',
        'withholding_credit_account' => '\MyobAPI\MyobPHP\Model\WithholdingCreditAccount',
        'withholding_payable_account' => '\MyobAPI\MyobPHP\Model\WithholdingPayableAccount',
        'import_duty_payable_account' => '\MyobAPI\MyobPHP\Model\ImportDutyPayableAccount',
        'linked_supplier' => 'string',
        'luxury_car_tax_threshold' => 'float',
        'last_modified' => 'string',
        'uri' => 'string',
        'row_version' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'uid' => null,
        'code' => null,
        'description' => null,
        'type' => null,
        'rate' => null,
        'is_rate_negative' => null,
        'tax_collected_account' => null,
        'tax_paid_account' => null,
        'withholding_credit_account' => null,
        'withholding_payable_account' => null,
        'import_duty_payable_account' => null,
        'linked_supplier' => null,
        'luxury_car_tax_threshold' => null,
        'last_modified' => null,
        'uri' => null,
        'row_version' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'uid' => 'UID',
        'code' => 'Code',
        'description' => 'Description',
        'type' => 'Type',
        'rate' => 'Rate',
        'is_rate_negative' => 'IsRateNegative',
        'tax_collected_account' => 'TaxCollectedAccount',
        'tax_paid_account' => 'TaxPaidAccount',
        'withholding_credit_account' => 'WithholdingCreditAccount',
        'withholding_payable_account' => 'WithholdingPayableAccount',
        'import_duty_payable_account' => 'ImportDutyPayableAccount',
        'linked_supplier' => 'LinkedSupplier',
        'luxury_car_tax_threshold' => 'LuxuryCarTaxThreshold',
        'last_modified' => 'LastModified',
        'uri' => 'URI',
        'row_version' => 'RowVersion'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'uid' => 'setUid',
        'code' => 'setCode',
        'description' => 'setDescription',
        'type' => 'setType',
        'rate' => 'setRate',
        'is_rate_negative' => 'setIsRateNegative',
        'tax_collected_account' => 'setTaxCollectedAccount',
        'tax_paid_account' => 'setTaxPaidAccount',
        'withholding_credit_account' => 'setWithholdingCreditAccount',
        'withholding_payable_account' => 'setWithholdingPayableAccount',
        'import_duty_payable_account' => 'setImportDutyPayableAccount',
        'linked_supplier' => 'setLinkedSupplier',
        'luxury_car_tax_threshold' => 'setLuxuryCarTaxThreshold',
        'last_modified' => 'setLastModified',
        'uri' => 'setUri',
        'row_version' => 'setRowVersion'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'uid' => 'getUid',
        'code' => 'getCode',
        'description' => 'getDescription',
        'type' => 'getType',
        'rate' => 'getRate',
        'is_rate_negative' => 'getIsRateNegative',
        'tax_collected_account' => 'getTaxCollectedAccount',
        'tax_paid_account' => 'getTaxPaidAccount',
        'withholding_credit_account' => 'getWithholdingCreditAccount',
        'withholding_payable_account' => 'getWithholdingPayableAccount',
        'import_duty_payable_account' => 'getImportDutyPayableAccount',
        'linked_supplier' => 'getLinkedSupplier',
        'luxury_car_tax_threshold' => 'getLuxuryCarTaxThreshold',
        'last_modified' => 'getLastModified',
        'uri' => 'getUri',
        'row_version' => 'getRowVersion'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const TYPE_IMPORT_DUTY = 'ImportDuty';
    const TYPE_SALES_TAX = 'SalesTax';
    const TYPE_GST_VAT__GOODS_AND_SERVICES_TAX = 'GST_VAT (Goods and Services Tax)';
    const TYPE_INPUT_TAXED = 'InputTaxed';
    const TYPE_CONSOLIDATED = 'Consolidated';
    const TYPE_LUXURY_CAR_TAX = 'LuxuryCarTax';
    const TYPE_WITHHOLDINGS_TAX = 'WithholdingsTax';
    const TYPE_NO_ABN_TFN = 'NoABN_TFN';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTypeAllowableValues()
    {
        return [
            self::TYPE_IMPORT_DUTY,
            self::TYPE_SALES_TAX,
            self::TYPE_GST_VAT__GOODS_AND_SERVICES_TAX,
            self::TYPE_INPUT_TAXED,
            self::TYPE_CONSOLIDATED,
            self::TYPE_LUXURY_CAR_TAX,
            self::TYPE_WITHHOLDINGS_TAX,
            self::TYPE_NO_ABN_TFN,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['uid'] = isset($data['uid']) ? $data['uid'] : null;
        $this->container['code'] = isset($data['code']) ? $data['code'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['type'] = isset($data['type']) ? $data['type'] : null;
        $this->container['rate'] = isset($data['rate']) ? $data['rate'] : null;
        $this->container['is_rate_negative'] = isset($data['is_rate_negative']) ? $data['is_rate_negative'] : null;
        $this->container['tax_collected_account'] = isset($data['tax_collected_account']) ? $data['tax_collected_account'] : null;
        $this->container['tax_paid_account'] = isset($data['tax_paid_account']) ? $data['tax_paid_account'] : null;
        $this->container['withholding_credit_account'] = isset($data['withholding_credit_account']) ? $data['withholding_credit_account'] : null;
        $this->container['withholding_payable_account'] = isset($data['withholding_payable_account']) ? $data['withholding_payable_account'] : null;
        $this->container['import_duty_payable_account'] = isset($data['import_duty_payable_account']) ? $data['import_duty_payable_account'] : null;
        $this->container['linked_supplier'] = isset($data['linked_supplier']) ? $data['linked_supplier'] : null;
        $this->container['luxury_car_tax_threshold'] = isset($data['luxury_car_tax_threshold']) ? $data['luxury_car_tax_threshold'] : null;
        $this->container['last_modified'] = isset($data['last_modified']) ? $data['last_modified'] : null;
        $this->container['uri'] = isset($data['uri']) ? $data['uri'] : null;
        $this->container['row_version'] = isset($data['row_version']) ? $data['row_version'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['uid'] === null) {
            $invalidProperties[] = "'uid' can't be null";
        }
        if ($this->container['code'] === null) {
            $invalidProperties[] = "'code' can't be null";
        }
        if ($this->container['description'] === null) {
            $invalidProperties[] = "'description' can't be null";
        }
        if ($this->container['type'] === null) {
            $invalidProperties[] = "'type' can't be null";
        }
        $allowedValues = $this->getTypeAllowableValues();
        if (!is_null($this->container['type']) && !in_array($this->container['type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets uid
     *
     * @return string
     */
    public function getUid()
    {
        return $this->container['uid'];
    }

    /**
     * Sets uid
     *
     * @param string $uid uid
     *
     * @return $this
     */
    public function setUid($uid)
    {
        $this->container['uid'] = $uid;

        return $this;
    }

    /**
     * Gets code
     *
     * @return string
     */
    public function getCode()
    {
        return $this->container['code'];
    }

    /**
     * Sets code
     *
     * @param string $code code
     *
     * @return $this
     */
    public function setCode($code)
    {
        $this->container['code'] = $code;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string $description description
     *
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string $type type
     *
     * @return $this
     */
    public function setType($type)
    {
        $allowedValues = $this->getTypeAllowableValues();
        if (!in_array($type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets rate
     *
     * @return float|null
     */
    public function getRate()
    {
        return $this->container['rate'];
    }

    /**
     * Sets rate
     *
     * @param float|null $rate rate
     *
     * @return $this
     */
    public function setRate($rate)
    {
        $this->container['rate'] = $rate;

        return $this;
    }

    /**
     * Gets is_rate_negative
     *
     * @return bool|null
     */
    public function getIsRateNegative()
    {
        return $this->container['is_rate_negative'];
    }

    /**
     * Sets is_rate_negative
     *
     * @param bool|null $is_rate_negative is_rate_negative
     *
     * @return $this
     */
    public function setIsRateNegative($is_rate_negative)
    {
        $this->container['is_rate_negative'] = $is_rate_negative;

        return $this;
    }

    /**
     * Gets tax_collected_account
     *
     * @return \MyobAPI\MyobPHP\Model\TaxCollectedAccount|null
     */
    public function getTaxCollectedAccount()
    {
        return $this->container['tax_collected_account'];
    }

    /**
     * Sets tax_collected_account
     *
     * @param \MyobAPI\MyobPHP\Model\TaxCollectedAccount|null $tax_collected_account tax_collected_account
     *
     * @return $this
     */
    public function setTaxCollectedAccount($tax_collected_account)
    {
        $this->container['tax_collected_account'] = $tax_collected_account;

        return $this;
    }

    /**
     * Gets tax_paid_account
     *
     * @return \MyobAPI\MyobPHP\Model\TaxPaidAccount|null
     */
    public function getTaxPaidAccount()
    {
        return $this->container['tax_paid_account'];
    }

    /**
     * Sets tax_paid_account
     *
     * @param \MyobAPI\MyobPHP\Model\TaxPaidAccount|null $tax_paid_account tax_paid_account
     *
     * @return $this
     */
    public function setTaxPaidAccount($tax_paid_account)
    {
        $this->container['tax_paid_account'] = $tax_paid_account;

        return $this;
    }

    /**
     * Gets withholding_credit_account
     *
     * @return \MyobAPI\MyobPHP\Model\WithholdingCreditAccount|null
     */
    public function getWithholdingCreditAccount()
    {
        return $this->container['withholding_credit_account'];
    }

    /**
     * Sets withholding_credit_account
     *
     * @param \MyobAPI\MyobPHP\Model\WithholdingCreditAccount|null $withholding_credit_account withholding_credit_account
     *
     * @return $this
     */
    public function setWithholdingCreditAccount($withholding_credit_account)
    {
        $this->container['withholding_credit_account'] = $withholding_credit_account;

        return $this;
    }

    /**
     * Gets withholding_payable_account
     *
     * @return \MyobAPI\MyobPHP\Model\WithholdingPayableAccount|null
     */
    public function getWithholdingPayableAccount()
    {
        return $this->container['withholding_payable_account'];
    }

    /**
     * Sets withholding_payable_account
     *
     * @param \MyobAPI\MyobPHP\Model\WithholdingPayableAccount|null $withholding_payable_account withholding_payable_account
     *
     * @return $this
     */
    public function setWithholdingPayableAccount($withholding_payable_account)
    {
        $this->container['withholding_payable_account'] = $withholding_payable_account;

        return $this;
    }

    /**
     * Gets import_duty_payable_account
     *
     * @return \MyobAPI\MyobPHP\Model\ImportDutyPayableAccount|null
     */
    public function getImportDutyPayableAccount()
    {
        return $this->container['import_duty_payable_account'];
    }

    /**
     * Sets import_duty_payable_account
     *
     * @param \MyobAPI\MyobPHP\Model\ImportDutyPayableAccount|null $import_duty_payable_account import_duty_payable_account
     *
     * @return $this
     */
    public function setImportDutyPayableAccount($import_duty_payable_account)
    {
        $this->container['import_duty_payable_account'] = $import_duty_payable_account;

        return $this;
    }

    /**
     * Gets linked_supplier
     *
     * @return string|null
     */
    public function getLinkedSupplier()
    {
        return $this->container['linked_supplier'];
    }

    /**
     * Sets linked_supplier
     *
     * @param string|null $linked_supplier linked_supplier
     *
     * @return $this
     */
    public function setLinkedSupplier($linked_supplier)
    {
        $this->container['linked_supplier'] = $linked_supplier;

        return $this;
    }

    /**
     * Gets luxury_car_tax_threshold
     *
     * @return float|null
     */
    public function getLuxuryCarTaxThreshold()
    {
        return $this->container['luxury_car_tax_threshold'];
    }

    /**
     * Sets luxury_car_tax_threshold
     *
     * @param float|null $luxury_car_tax_threshold luxury_car_tax_threshold
     *
     * @return $this
     */
    public function setLuxuryCarTaxThreshold($luxury_car_tax_threshold)
    {
        $this->container['luxury_car_tax_threshold'] = $luxury_car_tax_threshold;

        return $this;
    }

    /**
     * Gets last_modified
     *
     * @return string|null
     */
    public function getLastModified()
    {
        return $this->container['last_modified'];
    }

    /**
     * Sets last_modified
     *
     * @param string|null $last_modified last_modified
     *
     * @return $this
     */
    public function setLastModified($last_modified)
    {
        $this->container['last_modified'] = $last_modified;

        return $this;
    }

    /**
     * Gets uri
     *
     * @return string|null
     */
    public function getUri()
    {
        return $this->container['uri'];
    }

    /**
     * Sets uri
     *
     * @param string|null $uri uri
     *
     * @return $this
     */
    public function setUri($uri)
    {
        $this->container['uri'] = $uri;

        return $this;
    }

    /**
     * Gets row_version
     *
     * @return string|null
     */
    public function getRowVersion()
    {
        return $this->container['row_version'];
    }

    /**
     * Sets row_version
     *
     * @param string|null $row_version row_version
     *
     * @return $this
     */
    public function setRowVersion($row_version)
    {
        $this->container['row_version'] = $row_version;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


