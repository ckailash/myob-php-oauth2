<?php
/**
 * BuyingDetails
 *
 * PHP version 5
 *
 * @category Class
 * @package  MyobAPI\MyobPHP
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * MYOB AccountRight
 *
 * MYOB AccountRight API file
 *
 * The version of the OpenAPI document: 1.0
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 4.3.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace MyobAPI\MyobPHP\Model;

use \ArrayAccess;
use \MyobAPI\MyobPHP\ObjectSerializer;

/**
 * BuyingDetails Class Doc Comment
 *
 * @category Class
 * @package  MyobAPI\MyobPHP
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class BuyingDetails implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'BuyingDetails';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'purchase_layout' => 'string',
        'printed_form' => 'string',
        'purchase_order_delivery' => 'string',
        'expense_account' => '\MyobAPI\MyobPHP\Model\ExpenseAccount',
        'payment_memo' => 'string',
        'purchase_comment' => 'string',
        'supplier_billing_rate' => 'float',
        'shipping_method' => 'string',
        'is_reportable' => 'bool',
        'cost_per_hour' => 'float',
        'credit' => '\MyobAPI\MyobPHP\Model\Credit',
        'abn' => 'string',
        'abn_branch' => 'string',
        'tax_id_number' => 'string',
        'tax_code' => '\MyobAPI\MyobPHP\Model\TaxCode',
        'freight_tax_code' => '\MyobAPI\MyobPHP\Model\FreightTaxCode',
        'use_supplier_tax_code' => 'bool',
        'terms' => '\MyobAPI\MyobPHP\Model\BuyingDetailTerms',
        'payment_details' => '\MyobAPI\MyobPHP\Model\PaymentDetails'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'purchase_layout' => null,
        'printed_form' => null,
        'purchase_order_delivery' => null,
        'expense_account' => null,
        'payment_memo' => null,
        'purchase_comment' => null,
        'supplier_billing_rate' => null,
        'shipping_method' => null,
        'is_reportable' => null,
        'cost_per_hour' => null,
        'credit' => null,
        'abn' => null,
        'abn_branch' => null,
        'tax_id_number' => null,
        'tax_code' => null,
        'freight_tax_code' => null,
        'use_supplier_tax_code' => null,
        'terms' => null,
        'payment_details' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'purchase_layout' => 'PurchaseLayout',
        'printed_form' => 'PrintedForm',
        'purchase_order_delivery' => 'PurchaseOrderDelivery',
        'expense_account' => 'ExpenseAccount',
        'payment_memo' => 'PaymentMemo',
        'purchase_comment' => 'PurchaseComment',
        'supplier_billing_rate' => 'SupplierBillingRate',
        'shipping_method' => 'ShippingMethod',
        'is_reportable' => 'IsReportable',
        'cost_per_hour' => 'CostPerHour',
        'credit' => 'Credit',
        'abn' => 'ABN',
        'abn_branch' => 'ABNBranch',
        'tax_id_number' => 'TaxIdNumber',
        'tax_code' => 'TaxCode',
        'freight_tax_code' => 'FreightTaxCode',
        'use_supplier_tax_code' => 'UseSupplierTaxCode',
        'terms' => 'Terms',
        'payment_details' => 'PaymentDetails'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'purchase_layout' => 'setPurchaseLayout',
        'printed_form' => 'setPrintedForm',
        'purchase_order_delivery' => 'setPurchaseOrderDelivery',
        'expense_account' => 'setExpenseAccount',
        'payment_memo' => 'setPaymentMemo',
        'purchase_comment' => 'setPurchaseComment',
        'supplier_billing_rate' => 'setSupplierBillingRate',
        'shipping_method' => 'setShippingMethod',
        'is_reportable' => 'setIsReportable',
        'cost_per_hour' => 'setCostPerHour',
        'credit' => 'setCredit',
        'abn' => 'setAbn',
        'abn_branch' => 'setAbnBranch',
        'tax_id_number' => 'setTaxIdNumber',
        'tax_code' => 'setTaxCode',
        'freight_tax_code' => 'setFreightTaxCode',
        'use_supplier_tax_code' => 'setUseSupplierTaxCode',
        'terms' => 'setTerms',
        'payment_details' => 'setPaymentDetails'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'purchase_layout' => 'getPurchaseLayout',
        'printed_form' => 'getPrintedForm',
        'purchase_order_delivery' => 'getPurchaseOrderDelivery',
        'expense_account' => 'getExpenseAccount',
        'payment_memo' => 'getPaymentMemo',
        'purchase_comment' => 'getPurchaseComment',
        'supplier_billing_rate' => 'getSupplierBillingRate',
        'shipping_method' => 'getShippingMethod',
        'is_reportable' => 'getIsReportable',
        'cost_per_hour' => 'getCostPerHour',
        'credit' => 'getCredit',
        'abn' => 'getAbn',
        'abn_branch' => 'getAbnBranch',
        'tax_id_number' => 'getTaxIdNumber',
        'tax_code' => 'getTaxCode',
        'freight_tax_code' => 'getFreightTaxCode',
        'use_supplier_tax_code' => 'getUseSupplierTaxCode',
        'terms' => 'getTerms',
        'payment_details' => 'getPaymentDetails'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const PURCHASE_LAYOUT_NO_DEFAULT = 'NoDefault';
    const PURCHASE_LAYOUT_SERVICE = 'Service';
    const PURCHASE_LAYOUT_ITEM = 'Item';
    const PURCHASE_LAYOUT_PROFESSIONAL = 'Professional';
    const PURCHASE_LAYOUT_MISCELLANEOUS = 'Miscellaneous';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getPurchaseLayoutAllowableValues()
    {
        return [
            self::PURCHASE_LAYOUT_NO_DEFAULT,
            self::PURCHASE_LAYOUT_SERVICE,
            self::PURCHASE_LAYOUT_ITEM,
            self::PURCHASE_LAYOUT_PROFESSIONAL,
            self::PURCHASE_LAYOUT_MISCELLANEOUS,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['purchase_layout'] = isset($data['purchase_layout']) ? $data['purchase_layout'] : null;
        $this->container['printed_form'] = isset($data['printed_form']) ? $data['printed_form'] : null;
        $this->container['purchase_order_delivery'] = isset($data['purchase_order_delivery']) ? $data['purchase_order_delivery'] : null;
        $this->container['expense_account'] = isset($data['expense_account']) ? $data['expense_account'] : null;
        $this->container['payment_memo'] = isset($data['payment_memo']) ? $data['payment_memo'] : null;
        $this->container['purchase_comment'] = isset($data['purchase_comment']) ? $data['purchase_comment'] : null;
        $this->container['supplier_billing_rate'] = isset($data['supplier_billing_rate']) ? $data['supplier_billing_rate'] : null;
        $this->container['shipping_method'] = isset($data['shipping_method']) ? $data['shipping_method'] : null;
        $this->container['is_reportable'] = isset($data['is_reportable']) ? $data['is_reportable'] : null;
        $this->container['cost_per_hour'] = isset($data['cost_per_hour']) ? $data['cost_per_hour'] : null;
        $this->container['credit'] = isset($data['credit']) ? $data['credit'] : null;
        $this->container['abn'] = isset($data['abn']) ? $data['abn'] : null;
        $this->container['abn_branch'] = isset($data['abn_branch']) ? $data['abn_branch'] : null;
        $this->container['tax_id_number'] = isset($data['tax_id_number']) ? $data['tax_id_number'] : null;
        $this->container['tax_code'] = isset($data['tax_code']) ? $data['tax_code'] : null;
        $this->container['freight_tax_code'] = isset($data['freight_tax_code']) ? $data['freight_tax_code'] : null;
        $this->container['use_supplier_tax_code'] = isset($data['use_supplier_tax_code']) ? $data['use_supplier_tax_code'] : null;
        $this->container['terms'] = isset($data['terms']) ? $data['terms'] : null;
        $this->container['payment_details'] = isset($data['payment_details']) ? $data['payment_details'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getPurchaseLayoutAllowableValues();
        if (!is_null($this->container['purchase_layout']) && !in_array($this->container['purchase_layout'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'purchase_layout', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['tax_code'] === null) {
            $invalidProperties[] = "'tax_code' can't be null";
        }
        if ($this->container['freight_tax_code'] === null) {
            $invalidProperties[] = "'freight_tax_code' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets purchase_layout
     *
     * @return string|null
     */
    public function getPurchaseLayout()
    {
        return $this->container['purchase_layout'];
    }

    /**
     * Sets purchase_layout
     *
     * @param string|null $purchase_layout purchase_layout
     *
     * @return $this
     */
    public function setPurchaseLayout($purchase_layout)
    {
        $allowedValues = $this->getPurchaseLayoutAllowableValues();
        if (!is_null($purchase_layout) && !in_array($purchase_layout, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'purchase_layout', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['purchase_layout'] = $purchase_layout;

        return $this;
    }

    /**
     * Gets printed_form
     *
     * @return string|null
     */
    public function getPrintedForm()
    {
        return $this->container['printed_form'];
    }

    /**
     * Sets printed_form
     *
     * @param string|null $printed_form printed_form
     *
     * @return $this
     */
    public function setPrintedForm($printed_form)
    {
        $this->container['printed_form'] = $printed_form;

        return $this;
    }

    /**
     * Gets purchase_order_delivery
     *
     * @return string|null
     */
    public function getPurchaseOrderDelivery()
    {
        return $this->container['purchase_order_delivery'];
    }

    /**
     * Sets purchase_order_delivery
     *
     * @param string|null $purchase_order_delivery purchase_order_delivery
     *
     * @return $this
     */
    public function setPurchaseOrderDelivery($purchase_order_delivery)
    {
        $this->container['purchase_order_delivery'] = $purchase_order_delivery;

        return $this;
    }

    /**
     * Gets expense_account
     *
     * @return \MyobAPI\MyobPHP\Model\ExpenseAccount|null
     */
    public function getExpenseAccount()
    {
        return $this->container['expense_account'];
    }

    /**
     * Sets expense_account
     *
     * @param \MyobAPI\MyobPHP\Model\ExpenseAccount|null $expense_account expense_account
     *
     * @return $this
     */
    public function setExpenseAccount($expense_account)
    {
        $this->container['expense_account'] = $expense_account;

        return $this;
    }

    /**
     * Gets payment_memo
     *
     * @return string|null
     */
    public function getPaymentMemo()
    {
        return $this->container['payment_memo'];
    }

    /**
     * Sets payment_memo
     *
     * @param string|null $payment_memo payment_memo
     *
     * @return $this
     */
    public function setPaymentMemo($payment_memo)
    {
        $this->container['payment_memo'] = $payment_memo;

        return $this;
    }

    /**
     * Gets purchase_comment
     *
     * @return string|null
     */
    public function getPurchaseComment()
    {
        return $this->container['purchase_comment'];
    }

    /**
     * Sets purchase_comment
     *
     * @param string|null $purchase_comment purchase_comment
     *
     * @return $this
     */
    public function setPurchaseComment($purchase_comment)
    {
        $this->container['purchase_comment'] = $purchase_comment;

        return $this;
    }

    /**
     * Gets supplier_billing_rate
     *
     * @return float|null
     */
    public function getSupplierBillingRate()
    {
        return $this->container['supplier_billing_rate'];
    }

    /**
     * Sets supplier_billing_rate
     *
     * @param float|null $supplier_billing_rate supplier_billing_rate
     *
     * @return $this
     */
    public function setSupplierBillingRate($supplier_billing_rate)
    {
        $this->container['supplier_billing_rate'] = $supplier_billing_rate;

        return $this;
    }

    /**
     * Gets shipping_method
     *
     * @return string|null
     */
    public function getShippingMethod()
    {
        return $this->container['shipping_method'];
    }

    /**
     * Sets shipping_method
     *
     * @param string|null $shipping_method shipping_method
     *
     * @return $this
     */
    public function setShippingMethod($shipping_method)
    {
        $this->container['shipping_method'] = $shipping_method;

        return $this;
    }

    /**
     * Gets is_reportable
     *
     * @return bool|null
     */
    public function getIsReportable()
    {
        return $this->container['is_reportable'];
    }

    /**
     * Sets is_reportable
     *
     * @param bool|null $is_reportable is_reportable
     *
     * @return $this
     */
    public function setIsReportable($is_reportable)
    {
        $this->container['is_reportable'] = $is_reportable;

        return $this;
    }

    /**
     * Gets cost_per_hour
     *
     * @return float|null
     */
    public function getCostPerHour()
    {
        return $this->container['cost_per_hour'];
    }

    /**
     * Sets cost_per_hour
     *
     * @param float|null $cost_per_hour cost_per_hour
     *
     * @return $this
     */
    public function setCostPerHour($cost_per_hour)
    {
        $this->container['cost_per_hour'] = $cost_per_hour;

        return $this;
    }

    /**
     * Gets credit
     *
     * @return \MyobAPI\MyobPHP\Model\Credit|null
     */
    public function getCredit()
    {
        return $this->container['credit'];
    }

    /**
     * Sets credit
     *
     * @param \MyobAPI\MyobPHP\Model\Credit|null $credit credit
     *
     * @return $this
     */
    public function setCredit($credit)
    {
        $this->container['credit'] = $credit;

        return $this;
    }

    /**
     * Gets abn
     *
     * @return string|null
     */
    public function getAbn()
    {
        return $this->container['abn'];
    }

    /**
     * Sets abn
     *
     * @param string|null $abn abn
     *
     * @return $this
     */
    public function setAbn($abn)
    {
        $this->container['abn'] = $abn;

        return $this;
    }

    /**
     * Gets abn_branch
     *
     * @return string|null
     */
    public function getAbnBranch()
    {
        return $this->container['abn_branch'];
    }

    /**
     * Sets abn_branch
     *
     * @param string|null $abn_branch abn_branch
     *
     * @return $this
     */
    public function setAbnBranch($abn_branch)
    {
        $this->container['abn_branch'] = $abn_branch;

        return $this;
    }

    /**
     * Gets tax_id_number
     *
     * @return string|null
     */
    public function getTaxIdNumber()
    {
        return $this->container['tax_id_number'];
    }

    /**
     * Sets tax_id_number
     *
     * @param string|null $tax_id_number tax_id_number
     *
     * @return $this
     */
    public function setTaxIdNumber($tax_id_number)
    {
        $this->container['tax_id_number'] = $tax_id_number;

        return $this;
    }

    /**
     * Gets tax_code
     *
     * @return \MyobAPI\MyobPHP\Model\TaxCode
     */
    public function getTaxCode()
    {
        return $this->container['tax_code'];
    }

    /**
     * Sets tax_code
     *
     * @param \MyobAPI\MyobPHP\Model\TaxCode $tax_code tax_code
     *
     * @return $this
     */
    public function setTaxCode($tax_code)
    {
        $this->container['tax_code'] = $tax_code;

        return $this;
    }

    /**
     * Gets freight_tax_code
     *
     * @return \MyobAPI\MyobPHP\Model\FreightTaxCode
     */
    public function getFreightTaxCode()
    {
        return $this->container['freight_tax_code'];
    }

    /**
     * Sets freight_tax_code
     *
     * @param \MyobAPI\MyobPHP\Model\FreightTaxCode $freight_tax_code freight_tax_code
     *
     * @return $this
     */
    public function setFreightTaxCode($freight_tax_code)
    {
        $this->container['freight_tax_code'] = $freight_tax_code;

        return $this;
    }

    /**
     * Gets use_supplier_tax_code
     *
     * @return bool|null
     */
    public function getUseSupplierTaxCode()
    {
        return $this->container['use_supplier_tax_code'];
    }

    /**
     * Sets use_supplier_tax_code
     *
     * @param bool|null $use_supplier_tax_code use_supplier_tax_code
     *
     * @return $this
     */
    public function setUseSupplierTaxCode($use_supplier_tax_code)
    {
        $this->container['use_supplier_tax_code'] = $use_supplier_tax_code;

        return $this;
    }

    /**
     * Gets terms
     *
     * @return \MyobAPI\MyobPHP\Model\BuyingDetailTerms|null
     */
    public function getTerms()
    {
        return $this->container['terms'];
    }

    /**
     * Sets terms
     *
     * @param \MyobAPI\MyobPHP\Model\BuyingDetailTerms|null $terms terms
     *
     * @return $this
     */
    public function setTerms($terms)
    {
        $this->container['terms'] = $terms;

        return $this;
    }

    /**
     * Gets payment_details
     *
     * @return \MyobAPI\MyobPHP\Model\PaymentDetails|null
     */
    public function getPaymentDetails()
    {
        return $this->container['payment_details'];
    }

    /**
     * Sets payment_details
     *
     * @param \MyobAPI\MyobPHP\Model\PaymentDetails|null $payment_details payment_details
     *
     * @return $this
     */
    public function setPaymentDetails($payment_details)
    {
        $this->container['payment_details'] = $payment_details;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


