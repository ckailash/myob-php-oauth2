<?php
/**
 * ItemBill
 *
 * PHP version 5
 *
 * @category Class
 * @package  MyobAPI\MyobPHP
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * MYOB AccountRight
 *
 * MYOB AccountRight API file
 *
 * The version of the OpenAPI document: 1.0
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 4.3.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace MyobAPI\MyobPHP\Model;

use \ArrayAccess;
use \MyobAPI\MyobPHP\ObjectSerializer;

/**
 * ItemBill Class Doc Comment
 *
 * @category Class
 * @package  MyobAPI\MyobPHP
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class ItemBill implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'ItemBill';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'uid' => 'string',
        'number' => 'string',
        'date' => 'string',
        'supplier_invoice_number' => 'string',
        'supplier' => '\MyobAPI\MyobPHP\Model\Supplier',
        'ship_to_address' => 'string',
        'terms' => '\MyobAPI\MyobPHP\Model\ItemBillTerms',
        'is_tax_inclusive' => 'bool',
        'is_reportable' => 'bool',
        'lines' => '\MyobAPI\MyobPHP\Model\ItemBillLine[]',
        'subtotal' => 'float',
        'subtotal_foreign' => 'float',
        'freight' => 'float',
        'freight_tax_code' => '\MyobAPI\MyobPHP\Model\FreightTaxCode',
        'total_tax' => 'float',
        'total_tax_foreign' => 'float',
        'total_amount' => 'float',
        'total_amount_foreign' => 'float',
        'category' => '\MyobAPI\MyobPHP\Model\ItemBillCategory',
        'comment' => 'string',
        'shipping_method' => 'string',
        'promised_date' => 'string',
        'journal_memo' => 'string',
        'bill_delivery_status' => 'string',
        'applied_to_date' => 'float',
        'applied_to_date_foreign' => 'float',
        'balance_due_amount' => 'float',
        'balance_due_amount_foreign' => 'float',
        'status' => 'string',
        'last_payment_date' => 'string',
        'order' => '\MyobAPI\MyobPHP\Model\ItemBillOrder',
        'foreign_currency' => '\MyobAPI\MyobPHP\Model\ForeignCurrency',
        'currency_exchange_rate' => 'float',
        'uri' => 'string',
        'row_version' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'uid' => null,
        'number' => null,
        'date' => null,
        'supplier_invoice_number' => null,
        'supplier' => null,
        'ship_to_address' => null,
        'terms' => null,
        'is_tax_inclusive' => null,
        'is_reportable' => null,
        'lines' => null,
        'subtotal' => null,
        'subtotal_foreign' => null,
        'freight' => null,
        'freight_tax_code' => null,
        'total_tax' => null,
        'total_tax_foreign' => null,
        'total_amount' => null,
        'total_amount_foreign' => null,
        'category' => null,
        'comment' => null,
        'shipping_method' => null,
        'promised_date' => null,
        'journal_memo' => null,
        'bill_delivery_status' => null,
        'applied_to_date' => null,
        'applied_to_date_foreign' => null,
        'balance_due_amount' => null,
        'balance_due_amount_foreign' => null,
        'status' => null,
        'last_payment_date' => null,
        'order' => null,
        'foreign_currency' => null,
        'currency_exchange_rate' => null,
        'uri' => null,
        'row_version' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'uid' => 'UID',
        'number' => 'Number',
        'date' => 'Date',
        'supplier_invoice_number' => 'SupplierInvoiceNumber',
        'supplier' => 'Supplier',
        'ship_to_address' => 'ShipToAddress',
        'terms' => 'Terms',
        'is_tax_inclusive' => 'IsTaxInclusive',
        'is_reportable' => 'IsReportable',
        'lines' => 'Lines',
        'subtotal' => 'Subtotal',
        'subtotal_foreign' => 'SubtotalForeign',
        'freight' => 'Freight',
        'freight_tax_code' => 'FreightTaxCode',
        'total_tax' => 'TotalTax',
        'total_tax_foreign' => 'TotalTaxForeign',
        'total_amount' => 'TotalAmount',
        'total_amount_foreign' => 'TotalAmountForeign',
        'category' => 'Category',
        'comment' => 'Comment',
        'shipping_method' => 'ShippingMethod',
        'promised_date' => 'PromisedDate',
        'journal_memo' => 'JournalMemo',
        'bill_delivery_status' => 'BillDeliveryStatus',
        'applied_to_date' => 'AppliedToDate',
        'applied_to_date_foreign' => 'AppliedToDateForeign',
        'balance_due_amount' => 'BalanceDueAmount',
        'balance_due_amount_foreign' => 'BalanceDueAmountForeign',
        'status' => 'Status',
        'last_payment_date' => 'LastPaymentDate',
        'order' => 'Order',
        'foreign_currency' => 'ForeignCurrency',
        'currency_exchange_rate' => 'CurrencyExchangeRate',
        'uri' => 'URI',
        'row_version' => 'RowVersion'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'uid' => 'setUid',
        'number' => 'setNumber',
        'date' => 'setDate',
        'supplier_invoice_number' => 'setSupplierInvoiceNumber',
        'supplier' => 'setSupplier',
        'ship_to_address' => 'setShipToAddress',
        'terms' => 'setTerms',
        'is_tax_inclusive' => 'setIsTaxInclusive',
        'is_reportable' => 'setIsReportable',
        'lines' => 'setLines',
        'subtotal' => 'setSubtotal',
        'subtotal_foreign' => 'setSubtotalForeign',
        'freight' => 'setFreight',
        'freight_tax_code' => 'setFreightTaxCode',
        'total_tax' => 'setTotalTax',
        'total_tax_foreign' => 'setTotalTaxForeign',
        'total_amount' => 'setTotalAmount',
        'total_amount_foreign' => 'setTotalAmountForeign',
        'category' => 'setCategory',
        'comment' => 'setComment',
        'shipping_method' => 'setShippingMethod',
        'promised_date' => 'setPromisedDate',
        'journal_memo' => 'setJournalMemo',
        'bill_delivery_status' => 'setBillDeliveryStatus',
        'applied_to_date' => 'setAppliedToDate',
        'applied_to_date_foreign' => 'setAppliedToDateForeign',
        'balance_due_amount' => 'setBalanceDueAmount',
        'balance_due_amount_foreign' => 'setBalanceDueAmountForeign',
        'status' => 'setStatus',
        'last_payment_date' => 'setLastPaymentDate',
        'order' => 'setOrder',
        'foreign_currency' => 'setForeignCurrency',
        'currency_exchange_rate' => 'setCurrencyExchangeRate',
        'uri' => 'setUri',
        'row_version' => 'setRowVersion'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'uid' => 'getUid',
        'number' => 'getNumber',
        'date' => 'getDate',
        'supplier_invoice_number' => 'getSupplierInvoiceNumber',
        'supplier' => 'getSupplier',
        'ship_to_address' => 'getShipToAddress',
        'terms' => 'getTerms',
        'is_tax_inclusive' => 'getIsTaxInclusive',
        'is_reportable' => 'getIsReportable',
        'lines' => 'getLines',
        'subtotal' => 'getSubtotal',
        'subtotal_foreign' => 'getSubtotalForeign',
        'freight' => 'getFreight',
        'freight_tax_code' => 'getFreightTaxCode',
        'total_tax' => 'getTotalTax',
        'total_tax_foreign' => 'getTotalTaxForeign',
        'total_amount' => 'getTotalAmount',
        'total_amount_foreign' => 'getTotalAmountForeign',
        'category' => 'getCategory',
        'comment' => 'getComment',
        'shipping_method' => 'getShippingMethod',
        'promised_date' => 'getPromisedDate',
        'journal_memo' => 'getJournalMemo',
        'bill_delivery_status' => 'getBillDeliveryStatus',
        'applied_to_date' => 'getAppliedToDate',
        'applied_to_date_foreign' => 'getAppliedToDateForeign',
        'balance_due_amount' => 'getBalanceDueAmount',
        'balance_due_amount_foreign' => 'getBalanceDueAmountForeign',
        'status' => 'getStatus',
        'last_payment_date' => 'getLastPaymentDate',
        'order' => 'getOrder',
        'foreign_currency' => 'getForeignCurrency',
        'currency_exchange_rate' => 'getCurrencyExchangeRate',
        'uri' => 'getUri',
        'row_version' => 'getRowVersion'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const STATUS_OPEN = 'Open';
    const STATUS_CLOSED = 'Closed';
    const STATUS_DEBIT = 'Debit';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStatusAllowableValues()
    {
        return [
            self::STATUS_OPEN,
            self::STATUS_CLOSED,
            self::STATUS_DEBIT,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['uid'] = isset($data['uid']) ? $data['uid'] : null;
        $this->container['number'] = isset($data['number']) ? $data['number'] : null;
        $this->container['date'] = isset($data['date']) ? $data['date'] : null;
        $this->container['supplier_invoice_number'] = isset($data['supplier_invoice_number']) ? $data['supplier_invoice_number'] : null;
        $this->container['supplier'] = isset($data['supplier']) ? $data['supplier'] : null;
        $this->container['ship_to_address'] = isset($data['ship_to_address']) ? $data['ship_to_address'] : null;
        $this->container['terms'] = isset($data['terms']) ? $data['terms'] : null;
        $this->container['is_tax_inclusive'] = isset($data['is_tax_inclusive']) ? $data['is_tax_inclusive'] : null;
        $this->container['is_reportable'] = isset($data['is_reportable']) ? $data['is_reportable'] : null;
        $this->container['lines'] = isset($data['lines']) ? $data['lines'] : null;
        $this->container['subtotal'] = isset($data['subtotal']) ? $data['subtotal'] : null;
        $this->container['subtotal_foreign'] = isset($data['subtotal_foreign']) ? $data['subtotal_foreign'] : null;
        $this->container['freight'] = isset($data['freight']) ? $data['freight'] : null;
        $this->container['freight_tax_code'] = isset($data['freight_tax_code']) ? $data['freight_tax_code'] : null;
        $this->container['total_tax'] = isset($data['total_tax']) ? $data['total_tax'] : null;
        $this->container['total_tax_foreign'] = isset($data['total_tax_foreign']) ? $data['total_tax_foreign'] : null;
        $this->container['total_amount'] = isset($data['total_amount']) ? $data['total_amount'] : null;
        $this->container['total_amount_foreign'] = isset($data['total_amount_foreign']) ? $data['total_amount_foreign'] : null;
        $this->container['category'] = isset($data['category']) ? $data['category'] : null;
        $this->container['comment'] = isset($data['comment']) ? $data['comment'] : null;
        $this->container['shipping_method'] = isset($data['shipping_method']) ? $data['shipping_method'] : null;
        $this->container['promised_date'] = isset($data['promised_date']) ? $data['promised_date'] : null;
        $this->container['journal_memo'] = isset($data['journal_memo']) ? $data['journal_memo'] : null;
        $this->container['bill_delivery_status'] = isset($data['bill_delivery_status']) ? $data['bill_delivery_status'] : null;
        $this->container['applied_to_date'] = isset($data['applied_to_date']) ? $data['applied_to_date'] : null;
        $this->container['applied_to_date_foreign'] = isset($data['applied_to_date_foreign']) ? $data['applied_to_date_foreign'] : null;
        $this->container['balance_due_amount'] = isset($data['balance_due_amount']) ? $data['balance_due_amount'] : null;
        $this->container['balance_due_amount_foreign'] = isset($data['balance_due_amount_foreign']) ? $data['balance_due_amount_foreign'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['last_payment_date'] = isset($data['last_payment_date']) ? $data['last_payment_date'] : null;
        $this->container['order'] = isset($data['order']) ? $data['order'] : null;
        $this->container['foreign_currency'] = isset($data['foreign_currency']) ? $data['foreign_currency'] : null;
        $this->container['currency_exchange_rate'] = isset($data['currency_exchange_rate']) ? $data['currency_exchange_rate'] : null;
        $this->container['uri'] = isset($data['uri']) ? $data['uri'] : null;
        $this->container['row_version'] = isset($data['row_version']) ? $data['row_version'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($this->container['status']) && !in_array($this->container['status'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'status', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets uid
     *
     * @return string|null
     */
    public function getUid()
    {
        return $this->container['uid'];
    }

    /**
     * Sets uid
     *
     * @param string|null $uid uid
     *
     * @return $this
     */
    public function setUid($uid)
    {
        $this->container['uid'] = $uid;

        return $this;
    }

    /**
     * Gets number
     *
     * @return string|null
     */
    public function getNumber()
    {
        return $this->container['number'];
    }

    /**
     * Sets number
     *
     * @param string|null $number number
     *
     * @return $this
     */
    public function setNumber($number)
    {
        $this->container['number'] = $number;

        return $this;
    }

    /**
     * Gets date
     *
     * @return string|null
     */
    public function getDate()
    {
        return $this->container['date'];
    }

    /**
     * Sets date
     *
     * @param string|null $date date
     *
     * @return $this
     */
    public function setDate($date)
    {
        $this->container['date'] = $date;

        return $this;
    }

    /**
     * Gets supplier_invoice_number
     *
     * @return string|null
     */
    public function getSupplierInvoiceNumber()
    {
        return $this->container['supplier_invoice_number'];
    }

    /**
     * Sets supplier_invoice_number
     *
     * @param string|null $supplier_invoice_number supplier_invoice_number
     *
     * @return $this
     */
    public function setSupplierInvoiceNumber($supplier_invoice_number)
    {
        $this->container['supplier_invoice_number'] = $supplier_invoice_number;

        return $this;
    }

    /**
     * Gets supplier
     *
     * @return \MyobAPI\MyobPHP\Model\Supplier|null
     */
    public function getSupplier()
    {
        return $this->container['supplier'];
    }

    /**
     * Sets supplier
     *
     * @param \MyobAPI\MyobPHP\Model\Supplier|null $supplier supplier
     *
     * @return $this
     */
    public function setSupplier($supplier)
    {
        $this->container['supplier'] = $supplier;

        return $this;
    }

    /**
     * Gets ship_to_address
     *
     * @return string|null
     */
    public function getShipToAddress()
    {
        return $this->container['ship_to_address'];
    }

    /**
     * Sets ship_to_address
     *
     * @param string|null $ship_to_address ship_to_address
     *
     * @return $this
     */
    public function setShipToAddress($ship_to_address)
    {
        $this->container['ship_to_address'] = $ship_to_address;

        return $this;
    }

    /**
     * Gets terms
     *
     * @return \MyobAPI\MyobPHP\Model\ItemBillTerms|null
     */
    public function getTerms()
    {
        return $this->container['terms'];
    }

    /**
     * Sets terms
     *
     * @param \MyobAPI\MyobPHP\Model\ItemBillTerms|null $terms terms
     *
     * @return $this
     */
    public function setTerms($terms)
    {
        $this->container['terms'] = $terms;

        return $this;
    }

    /**
     * Gets is_tax_inclusive
     *
     * @return bool|null
     */
    public function getIsTaxInclusive()
    {
        return $this->container['is_tax_inclusive'];
    }

    /**
     * Sets is_tax_inclusive
     *
     * @param bool|null $is_tax_inclusive is_tax_inclusive
     *
     * @return $this
     */
    public function setIsTaxInclusive($is_tax_inclusive)
    {
        $this->container['is_tax_inclusive'] = $is_tax_inclusive;

        return $this;
    }

    /**
     * Gets is_reportable
     *
     * @return bool|null
     */
    public function getIsReportable()
    {
        return $this->container['is_reportable'];
    }

    /**
     * Sets is_reportable
     *
     * @param bool|null $is_reportable is_reportable
     *
     * @return $this
     */
    public function setIsReportable($is_reportable)
    {
        $this->container['is_reportable'] = $is_reportable;

        return $this;
    }

    /**
     * Gets lines
     *
     * @return \MyobAPI\MyobPHP\Model\ItemBillLine[]|null
     */
    public function getLines()
    {
        return $this->container['lines'];
    }

    /**
     * Sets lines
     *
     * @param \MyobAPI\MyobPHP\Model\ItemBillLine[]|null $lines lines
     *
     * @return $this
     */
    public function setLines($lines)
    {
        $this->container['lines'] = $lines;

        return $this;
    }

    /**
     * Gets subtotal
     *
     * @return float|null
     */
    public function getSubtotal()
    {
        return $this->container['subtotal'];
    }

    /**
     * Sets subtotal
     *
     * @param float|null $subtotal subtotal
     *
     * @return $this
     */
    public function setSubtotal($subtotal)
    {
        $this->container['subtotal'] = $subtotal;

        return $this;
    }

    /**
     * Gets subtotal_foreign
     *
     * @return float|null
     */
    public function getSubtotalForeign()
    {
        return $this->container['subtotal_foreign'];
    }

    /**
     * Sets subtotal_foreign
     *
     * @param float|null $subtotal_foreign subtotal_foreign
     *
     * @return $this
     */
    public function setSubtotalForeign($subtotal_foreign)
    {
        $this->container['subtotal_foreign'] = $subtotal_foreign;

        return $this;
    }

    /**
     * Gets freight
     *
     * @return float|null
     */
    public function getFreight()
    {
        return $this->container['freight'];
    }

    /**
     * Sets freight
     *
     * @param float|null $freight freight
     *
     * @return $this
     */
    public function setFreight($freight)
    {
        $this->container['freight'] = $freight;

        return $this;
    }

    /**
     * Gets freight_tax_code
     *
     * @return \MyobAPI\MyobPHP\Model\FreightTaxCode|null
     */
    public function getFreightTaxCode()
    {
        return $this->container['freight_tax_code'];
    }

    /**
     * Sets freight_tax_code
     *
     * @param \MyobAPI\MyobPHP\Model\FreightTaxCode|null $freight_tax_code freight_tax_code
     *
     * @return $this
     */
    public function setFreightTaxCode($freight_tax_code)
    {
        $this->container['freight_tax_code'] = $freight_tax_code;

        return $this;
    }

    /**
     * Gets total_tax
     *
     * @return float|null
     */
    public function getTotalTax()
    {
        return $this->container['total_tax'];
    }

    /**
     * Sets total_tax
     *
     * @param float|null $total_tax total_tax
     *
     * @return $this
     */
    public function setTotalTax($total_tax)
    {
        $this->container['total_tax'] = $total_tax;

        return $this;
    }

    /**
     * Gets total_tax_foreign
     *
     * @return float|null
     */
    public function getTotalTaxForeign()
    {
        return $this->container['total_tax_foreign'];
    }

    /**
     * Sets total_tax_foreign
     *
     * @param float|null $total_tax_foreign total_tax_foreign
     *
     * @return $this
     */
    public function setTotalTaxForeign($total_tax_foreign)
    {
        $this->container['total_tax_foreign'] = $total_tax_foreign;

        return $this;
    }

    /**
     * Gets total_amount
     *
     * @return float|null
     */
    public function getTotalAmount()
    {
        return $this->container['total_amount'];
    }

    /**
     * Sets total_amount
     *
     * @param float|null $total_amount total_amount
     *
     * @return $this
     */
    public function setTotalAmount($total_amount)
    {
        $this->container['total_amount'] = $total_amount;

        return $this;
    }

    /**
     * Gets total_amount_foreign
     *
     * @return float|null
     */
    public function getTotalAmountForeign()
    {
        return $this->container['total_amount_foreign'];
    }

    /**
     * Sets total_amount_foreign
     *
     * @param float|null $total_amount_foreign total_amount_foreign
     *
     * @return $this
     */
    public function setTotalAmountForeign($total_amount_foreign)
    {
        $this->container['total_amount_foreign'] = $total_amount_foreign;

        return $this;
    }

    /**
     * Gets category
     *
     * @return \MyobAPI\MyobPHP\Model\ItemBillCategory|null
     */
    public function getCategory()
    {
        return $this->container['category'];
    }

    /**
     * Sets category
     *
     * @param \MyobAPI\MyobPHP\Model\ItemBillCategory|null $category category
     *
     * @return $this
     */
    public function setCategory($category)
    {
        $this->container['category'] = $category;

        return $this;
    }

    /**
     * Gets comment
     *
     * @return string|null
     */
    public function getComment()
    {
        return $this->container['comment'];
    }

    /**
     * Sets comment
     *
     * @param string|null $comment comment
     *
     * @return $this
     */
    public function setComment($comment)
    {
        $this->container['comment'] = $comment;

        return $this;
    }

    /**
     * Gets shipping_method
     *
     * @return string|null
     */
    public function getShippingMethod()
    {
        return $this->container['shipping_method'];
    }

    /**
     * Sets shipping_method
     *
     * @param string|null $shipping_method shipping_method
     *
     * @return $this
     */
    public function setShippingMethod($shipping_method)
    {
        $this->container['shipping_method'] = $shipping_method;

        return $this;
    }

    /**
     * Gets promised_date
     *
     * @return string|null
     */
    public function getPromisedDate()
    {
        return $this->container['promised_date'];
    }

    /**
     * Sets promised_date
     *
     * @param string|null $promised_date promised_date
     *
     * @return $this
     */
    public function setPromisedDate($promised_date)
    {
        $this->container['promised_date'] = $promised_date;

        return $this;
    }

    /**
     * Gets journal_memo
     *
     * @return string|null
     */
    public function getJournalMemo()
    {
        return $this->container['journal_memo'];
    }

    /**
     * Sets journal_memo
     *
     * @param string|null $journal_memo journal_memo
     *
     * @return $this
     */
    public function setJournalMemo($journal_memo)
    {
        $this->container['journal_memo'] = $journal_memo;

        return $this;
    }

    /**
     * Gets bill_delivery_status
     *
     * @return string|null
     */
    public function getBillDeliveryStatus()
    {
        return $this->container['bill_delivery_status'];
    }

    /**
     * Sets bill_delivery_status
     *
     * @param string|null $bill_delivery_status bill_delivery_status
     *
     * @return $this
     */
    public function setBillDeliveryStatus($bill_delivery_status)
    {
        $this->container['bill_delivery_status'] = $bill_delivery_status;

        return $this;
    }

    /**
     * Gets applied_to_date
     *
     * @return float|null
     */
    public function getAppliedToDate()
    {
        return $this->container['applied_to_date'];
    }

    /**
     * Sets applied_to_date
     *
     * @param float|null $applied_to_date applied_to_date
     *
     * @return $this
     */
    public function setAppliedToDate($applied_to_date)
    {
        $this->container['applied_to_date'] = $applied_to_date;

        return $this;
    }

    /**
     * Gets applied_to_date_foreign
     *
     * @return float|null
     */
    public function getAppliedToDateForeign()
    {
        return $this->container['applied_to_date_foreign'];
    }

    /**
     * Sets applied_to_date_foreign
     *
     * @param float|null $applied_to_date_foreign applied_to_date_foreign
     *
     * @return $this
     */
    public function setAppliedToDateForeign($applied_to_date_foreign)
    {
        $this->container['applied_to_date_foreign'] = $applied_to_date_foreign;

        return $this;
    }

    /**
     * Gets balance_due_amount
     *
     * @return float|null
     */
    public function getBalanceDueAmount()
    {
        return $this->container['balance_due_amount'];
    }

    /**
     * Sets balance_due_amount
     *
     * @param float|null $balance_due_amount balance_due_amount
     *
     * @return $this
     */
    public function setBalanceDueAmount($balance_due_amount)
    {
        $this->container['balance_due_amount'] = $balance_due_amount;

        return $this;
    }

    /**
     * Gets balance_due_amount_foreign
     *
     * @return float|null
     */
    public function getBalanceDueAmountForeign()
    {
        return $this->container['balance_due_amount_foreign'];
    }

    /**
     * Sets balance_due_amount_foreign
     *
     * @param float|null $balance_due_amount_foreign balance_due_amount_foreign
     *
     * @return $this
     */
    public function setBalanceDueAmountForeign($balance_due_amount_foreign)
    {
        $this->container['balance_due_amount_foreign'] = $balance_due_amount_foreign;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string|null
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string|null $status status
     *
     * @return $this
     */
    public function setStatus($status)
    {
        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($status) && !in_array($status, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'status', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets last_payment_date
     *
     * @return string|null
     */
    public function getLastPaymentDate()
    {
        return $this->container['last_payment_date'];
    }

    /**
     * Sets last_payment_date
     *
     * @param string|null $last_payment_date last_payment_date
     *
     * @return $this
     */
    public function setLastPaymentDate($last_payment_date)
    {
        $this->container['last_payment_date'] = $last_payment_date;

        return $this;
    }

    /**
     * Gets order
     *
     * @return \MyobAPI\MyobPHP\Model\ItemBillOrder|null
     */
    public function getOrder()
    {
        return $this->container['order'];
    }

    /**
     * Sets order
     *
     * @param \MyobAPI\MyobPHP\Model\ItemBillOrder|null $order order
     *
     * @return $this
     */
    public function setOrder($order)
    {
        $this->container['order'] = $order;

        return $this;
    }

    /**
     * Gets foreign_currency
     *
     * @return \MyobAPI\MyobPHP\Model\ForeignCurrency|null
     */
    public function getForeignCurrency()
    {
        return $this->container['foreign_currency'];
    }

    /**
     * Sets foreign_currency
     *
     * @param \MyobAPI\MyobPHP\Model\ForeignCurrency|null $foreign_currency foreign_currency
     *
     * @return $this
     */
    public function setForeignCurrency($foreign_currency)
    {
        $this->container['foreign_currency'] = $foreign_currency;

        return $this;
    }

    /**
     * Gets currency_exchange_rate
     *
     * @return float|null
     */
    public function getCurrencyExchangeRate()
    {
        return $this->container['currency_exchange_rate'];
    }

    /**
     * Sets currency_exchange_rate
     *
     * @param float|null $currency_exchange_rate currency_exchange_rate
     *
     * @return $this
     */
    public function setCurrencyExchangeRate($currency_exchange_rate)
    {
        $this->container['currency_exchange_rate'] = $currency_exchange_rate;

        return $this;
    }

    /**
     * Gets uri
     *
     * @return string|null
     */
    public function getUri()
    {
        return $this->container['uri'];
    }

    /**
     * Sets uri
     *
     * @param string|null $uri uri
     *
     * @return $this
     */
    public function setUri($uri)
    {
        $this->container['uri'] = $uri;

        return $this;
    }

    /**
     * Gets row_version
     *
     * @return string|null
     */
    public function getRowVersion()
    {
        return $this->container['row_version'];
    }

    /**
     * Sets row_version
     *
     * @param string|null $row_version row_version
     *
     * @return $this
     */
    public function setRowVersion($row_version)
    {
        $this->container['row_version'] = $row_version;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


