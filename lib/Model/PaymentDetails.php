<?php
/**
 * PaymentDetails
 *
 * PHP version 5
 *
 * @category Class
 * @package  MyobAPI\MyobPHP
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * MYOB AccountRight
 *
 * MYOB AccountRight API file
 *
 * The version of the OpenAPI document: 1.0
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 4.3.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace MyobAPI\MyobPHP\Model;

use \ArrayAccess;
use \MyobAPI\MyobPHP\ObjectSerializer;

/**
 * PaymentDetails Class Doc Comment
 *
 * @category Class
 * @package  MyobAPI\MyobPHP
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class PaymentDetails implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'PaymentDetails';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'bsb_number' => 'string',
        'bank_account_number' => 'string',
        'bank_account_name' => 'string',
        'statement_text' => 'string',
        'refund' => '\MyobAPI\MyobPHP\Model\PaymentDetailsRefund'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'bsb_number' => null,
        'bank_account_number' => null,
        'bank_account_name' => null,
        'statement_text' => null,
        'refund' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'bsb_number' => 'BSBNumber',
        'bank_account_number' => 'BankAccountNumber',
        'bank_account_name' => 'BankAccountName',
        'statement_text' => 'StatementText',
        'refund' => 'Refund'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'bsb_number' => 'setBsbNumber',
        'bank_account_number' => 'setBankAccountNumber',
        'bank_account_name' => 'setBankAccountName',
        'statement_text' => 'setStatementText',
        'refund' => 'setRefund'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'bsb_number' => 'getBsbNumber',
        'bank_account_number' => 'getBankAccountNumber',
        'bank_account_name' => 'getBankAccountName',
        'statement_text' => 'getStatementText',
        'refund' => 'getRefund'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['bsb_number'] = isset($data['bsb_number']) ? $data['bsb_number'] : null;
        $this->container['bank_account_number'] = isset($data['bank_account_number']) ? $data['bank_account_number'] : null;
        $this->container['bank_account_name'] = isset($data['bank_account_name']) ? $data['bank_account_name'] : null;
        $this->container['statement_text'] = isset($data['statement_text']) ? $data['statement_text'] : null;
        $this->container['refund'] = isset($data['refund']) ? $data['refund'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['bsb_number'] === null) {
            $invalidProperties[] = "'bsb_number' can't be null";
        }
        if ($this->container['bank_account_number'] === null) {
            $invalidProperties[] = "'bank_account_number' can't be null";
        }
        if ($this->container['bank_account_name'] === null) {
            $invalidProperties[] = "'bank_account_name' can't be null";
        }
        if ($this->container['statement_text'] === null) {
            $invalidProperties[] = "'statement_text' can't be null";
        }
        if ($this->container['refund'] === null) {
            $invalidProperties[] = "'refund' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets bsb_number
     *
     * @return string
     */
    public function getBsbNumber()
    {
        return $this->container['bsb_number'];
    }

    /**
     * Sets bsb_number
     *
     * @param string $bsb_number bsb_number
     *
     * @return $this
     */
    public function setBsbNumber($bsb_number)
    {
        $this->container['bsb_number'] = $bsb_number;

        return $this;
    }

    /**
     * Gets bank_account_number
     *
     * @return string
     */
    public function getBankAccountNumber()
    {
        return $this->container['bank_account_number'];
    }

    /**
     * Sets bank_account_number
     *
     * @param string $bank_account_number bank_account_number
     *
     * @return $this
     */
    public function setBankAccountNumber($bank_account_number)
    {
        $this->container['bank_account_number'] = $bank_account_number;

        return $this;
    }

    /**
     * Gets bank_account_name
     *
     * @return string
     */
    public function getBankAccountName()
    {
        return $this->container['bank_account_name'];
    }

    /**
     * Sets bank_account_name
     *
     * @param string $bank_account_name bank_account_name
     *
     * @return $this
     */
    public function setBankAccountName($bank_account_name)
    {
        $this->container['bank_account_name'] = $bank_account_name;

        return $this;
    }

    /**
     * Gets statement_text
     *
     * @return string
     */
    public function getStatementText()
    {
        return $this->container['statement_text'];
    }

    /**
     * Sets statement_text
     *
     * @param string $statement_text statement_text
     *
     * @return $this
     */
    public function setStatementText($statement_text)
    {
        $this->container['statement_text'] = $statement_text;

        return $this;
    }

    /**
     * Gets refund
     *
     * @return \MyobAPI\MyobPHP\Model\PaymentDetailsRefund
     */
    public function getRefund()
    {
        return $this->container['refund'];
    }

    /**
     * Sets refund
     *
     * @param \MyobAPI\MyobPHP\Model\PaymentDetailsRefund $refund refund
     *
     * @return $this
     */
    public function setRefund($refund)
    {
        $this->container['refund'] = $refund;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


