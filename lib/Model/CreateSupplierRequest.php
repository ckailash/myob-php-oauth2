<?php
/**
 * CreateSupplierRequest
 *
 * PHP version 5
 *
 * @category Class
 * @package  MyobAPI\MyobPHP
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * MYOB AccountRight
 *
 * MYOB AccountRight API file
 *
 * The version of the OpenAPI document: 1.0
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 4.3.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace MyobAPI\MyobPHP\Model;

use \ArrayAccess;
use \MyobAPI\MyobPHP\ObjectSerializer;

/**
 * CreateSupplierRequest Class Doc Comment
 *
 * @category Class
 * @package  MyobAPI\MyobPHP
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class CreateSupplierRequest implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'createSupplierRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'company_name' => 'string',
        'last_name' => 'string',
        'first_name' => 'string',
        'is_individual' => 'bool',
        'is_active' => 'bool',
        'display_id' => 'string',
        'addresses' => '\MyobAPI\MyobPHP\Model\Address[]',
        'notes' => 'string',
        'identifiers' => '\MyobAPI\MyobPHP\Model\Identifiers[]',
        'custom_list1' => '\MyobAPI\MyobPHP\Model\CustomList',
        'custom_list2' => '\MyobAPI\MyobPHP\Model\CustomList',
        'custom_list3' => '\MyobAPI\MyobPHP\Model\CustomList',
        'custom_field1' => '\MyobAPI\MyobPHP\Model\CustomField',
        'custom_field2' => '\MyobAPI\MyobPHP\Model\CustomField',
        'custom_field3' => '\MyobAPI\MyobPHP\Model\CustomField',
        'buying_details' => '\MyobAPI\MyobPHP\Model\BuyingDetails',
        'payment_details' => '\MyobAPI\MyobPHP\Model\PaymentDetails'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'company_name' => null,
        'last_name' => null,
        'first_name' => null,
        'is_individual' => null,
        'is_active' => null,
        'display_id' => null,
        'addresses' => null,
        'notes' => null,
        'identifiers' => null,
        'custom_list1' => null,
        'custom_list2' => null,
        'custom_list3' => null,
        'custom_field1' => null,
        'custom_field2' => null,
        'custom_field3' => null,
        'buying_details' => null,
        'payment_details' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'company_name' => 'CompanyName',
        'last_name' => 'LastName',
        'first_name' => 'FirstName',
        'is_individual' => 'IsIndividual',
        'is_active' => 'IsActive',
        'display_id' => 'DisplayID',
        'addresses' => 'Addresses',
        'notes' => 'Notes',
        'identifiers' => 'Identifiers',
        'custom_list1' => 'CustomList1',
        'custom_list2' => 'CustomList2',
        'custom_list3' => 'CustomList3',
        'custom_field1' => 'CustomField1',
        'custom_field2' => 'CustomField2',
        'custom_field3' => 'CustomField3',
        'buying_details' => 'BuyingDetails',
        'payment_details' => 'PaymentDetails'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'company_name' => 'setCompanyName',
        'last_name' => 'setLastName',
        'first_name' => 'setFirstName',
        'is_individual' => 'setIsIndividual',
        'is_active' => 'setIsActive',
        'display_id' => 'setDisplayId',
        'addresses' => 'setAddresses',
        'notes' => 'setNotes',
        'identifiers' => 'setIdentifiers',
        'custom_list1' => 'setCustomList1',
        'custom_list2' => 'setCustomList2',
        'custom_list3' => 'setCustomList3',
        'custom_field1' => 'setCustomField1',
        'custom_field2' => 'setCustomField2',
        'custom_field3' => 'setCustomField3',
        'buying_details' => 'setBuyingDetails',
        'payment_details' => 'setPaymentDetails'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'company_name' => 'getCompanyName',
        'last_name' => 'getLastName',
        'first_name' => 'getFirstName',
        'is_individual' => 'getIsIndividual',
        'is_active' => 'getIsActive',
        'display_id' => 'getDisplayId',
        'addresses' => 'getAddresses',
        'notes' => 'getNotes',
        'identifiers' => 'getIdentifiers',
        'custom_list1' => 'getCustomList1',
        'custom_list2' => 'getCustomList2',
        'custom_list3' => 'getCustomList3',
        'custom_field1' => 'getCustomField1',
        'custom_field2' => 'getCustomField2',
        'custom_field3' => 'getCustomField3',
        'buying_details' => 'getBuyingDetails',
        'payment_details' => 'getPaymentDetails'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['company_name'] = isset($data['company_name']) ? $data['company_name'] : null;
        $this->container['last_name'] = isset($data['last_name']) ? $data['last_name'] : null;
        $this->container['first_name'] = isset($data['first_name']) ? $data['first_name'] : null;
        $this->container['is_individual'] = isset($data['is_individual']) ? $data['is_individual'] : null;
        $this->container['is_active'] = isset($data['is_active']) ? $data['is_active'] : null;
        $this->container['display_id'] = isset($data['display_id']) ? $data['display_id'] : null;
        $this->container['addresses'] = isset($data['addresses']) ? $data['addresses'] : null;
        $this->container['notes'] = isset($data['notes']) ? $data['notes'] : null;
        $this->container['identifiers'] = isset($data['identifiers']) ? $data['identifiers'] : null;
        $this->container['custom_list1'] = isset($data['custom_list1']) ? $data['custom_list1'] : null;
        $this->container['custom_list2'] = isset($data['custom_list2']) ? $data['custom_list2'] : null;
        $this->container['custom_list3'] = isset($data['custom_list3']) ? $data['custom_list3'] : null;
        $this->container['custom_field1'] = isset($data['custom_field1']) ? $data['custom_field1'] : null;
        $this->container['custom_field2'] = isset($data['custom_field2']) ? $data['custom_field2'] : null;
        $this->container['custom_field3'] = isset($data['custom_field3']) ? $data['custom_field3'] : null;
        $this->container['buying_details'] = isset($data['buying_details']) ? $data['buying_details'] : null;
        $this->container['payment_details'] = isset($data['payment_details']) ? $data['payment_details'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['company_name'] === null) {
            $invalidProperties[] = "'company_name' can't be null";
        }
        if ($this->container['last_name'] === null) {
            $invalidProperties[] = "'last_name' can't be null";
        }
        if ($this->container['first_name'] === null) {
            $invalidProperties[] = "'first_name' can't be null";
        }
        if ($this->container['is_individual'] === null) {
            $invalidProperties[] = "'is_individual' can't be null";
        }
        if ($this->container['display_id'] === null) {
            $invalidProperties[] = "'display_id' can't be null";
        }
        if ($this->container['buying_details'] === null) {
            $invalidProperties[] = "'buying_details' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets company_name
     *
     * @return string
     */
    public function getCompanyName()
    {
        return $this->container['company_name'];
    }

    /**
     * Sets company_name
     *
     * @param string $company_name company_name
     *
     * @return $this
     */
    public function setCompanyName($company_name)
    {
        $this->container['company_name'] = $company_name;

        return $this;
    }

    /**
     * Gets last_name
     *
     * @return string
     */
    public function getLastName()
    {
        return $this->container['last_name'];
    }

    /**
     * Sets last_name
     *
     * @param string $last_name last_name
     *
     * @return $this
     */
    public function setLastName($last_name)
    {
        $this->container['last_name'] = $last_name;

        return $this;
    }

    /**
     * Gets first_name
     *
     * @return string
     */
    public function getFirstName()
    {
        return $this->container['first_name'];
    }

    /**
     * Sets first_name
     *
     * @param string $first_name first_name
     *
     * @return $this
     */
    public function setFirstName($first_name)
    {
        $this->container['first_name'] = $first_name;

        return $this;
    }

    /**
     * Gets is_individual
     *
     * @return bool
     */
    public function getIsIndividual()
    {
        return $this->container['is_individual'];
    }

    /**
     * Sets is_individual
     *
     * @param bool $is_individual is_individual
     *
     * @return $this
     */
    public function setIsIndividual($is_individual)
    {
        $this->container['is_individual'] = $is_individual;

        return $this;
    }

    /**
     * Gets is_active
     *
     * @return bool|null
     */
    public function getIsActive()
    {
        return $this->container['is_active'];
    }

    /**
     * Sets is_active
     *
     * @param bool|null $is_active is_active
     *
     * @return $this
     */
    public function setIsActive($is_active)
    {
        $this->container['is_active'] = $is_active;

        return $this;
    }

    /**
     * Gets display_id
     *
     * @return string
     */
    public function getDisplayId()
    {
        return $this->container['display_id'];
    }

    /**
     * Sets display_id
     *
     * @param string $display_id display_id
     *
     * @return $this
     */
    public function setDisplayId($display_id)
    {
        $this->container['display_id'] = $display_id;

        return $this;
    }

    /**
     * Gets addresses
     *
     * @return \MyobAPI\MyobPHP\Model\Address[]|null
     */
    public function getAddresses()
    {
        return $this->container['addresses'];
    }

    /**
     * Sets addresses
     *
     * @param \MyobAPI\MyobPHP\Model\Address[]|null $addresses addresses
     *
     * @return $this
     */
    public function setAddresses($addresses)
    {
        $this->container['addresses'] = $addresses;

        return $this;
    }

    /**
     * Gets notes
     *
     * @return string|null
     */
    public function getNotes()
    {
        return $this->container['notes'];
    }

    /**
     * Sets notes
     *
     * @param string|null $notes notes
     *
     * @return $this
     */
    public function setNotes($notes)
    {
        $this->container['notes'] = $notes;

        return $this;
    }

    /**
     * Gets identifiers
     *
     * @return \MyobAPI\MyobPHP\Model\Identifiers[]|null
     */
    public function getIdentifiers()
    {
        return $this->container['identifiers'];
    }

    /**
     * Sets identifiers
     *
     * @param \MyobAPI\MyobPHP\Model\Identifiers[]|null $identifiers identifiers
     *
     * @return $this
     */
    public function setIdentifiers($identifiers)
    {
        $this->container['identifiers'] = $identifiers;

        return $this;
    }

    /**
     * Gets custom_list1
     *
     * @return \MyobAPI\MyobPHP\Model\CustomList|null
     */
    public function getCustomList1()
    {
        return $this->container['custom_list1'];
    }

    /**
     * Sets custom_list1
     *
     * @param \MyobAPI\MyobPHP\Model\CustomList|null $custom_list1 custom_list1
     *
     * @return $this
     */
    public function setCustomList1($custom_list1)
    {
        $this->container['custom_list1'] = $custom_list1;

        return $this;
    }

    /**
     * Gets custom_list2
     *
     * @return \MyobAPI\MyobPHP\Model\CustomList|null
     */
    public function getCustomList2()
    {
        return $this->container['custom_list2'];
    }

    /**
     * Sets custom_list2
     *
     * @param \MyobAPI\MyobPHP\Model\CustomList|null $custom_list2 custom_list2
     *
     * @return $this
     */
    public function setCustomList2($custom_list2)
    {
        $this->container['custom_list2'] = $custom_list2;

        return $this;
    }

    /**
     * Gets custom_list3
     *
     * @return \MyobAPI\MyobPHP\Model\CustomList|null
     */
    public function getCustomList3()
    {
        return $this->container['custom_list3'];
    }

    /**
     * Sets custom_list3
     *
     * @param \MyobAPI\MyobPHP\Model\CustomList|null $custom_list3 custom_list3
     *
     * @return $this
     */
    public function setCustomList3($custom_list3)
    {
        $this->container['custom_list3'] = $custom_list3;

        return $this;
    }

    /**
     * Gets custom_field1
     *
     * @return \MyobAPI\MyobPHP\Model\CustomField|null
     */
    public function getCustomField1()
    {
        return $this->container['custom_field1'];
    }

    /**
     * Sets custom_field1
     *
     * @param \MyobAPI\MyobPHP\Model\CustomField|null $custom_field1 custom_field1
     *
     * @return $this
     */
    public function setCustomField1($custom_field1)
    {
        $this->container['custom_field1'] = $custom_field1;

        return $this;
    }

    /**
     * Gets custom_field2
     *
     * @return \MyobAPI\MyobPHP\Model\CustomField|null
     */
    public function getCustomField2()
    {
        return $this->container['custom_field2'];
    }

    /**
     * Sets custom_field2
     *
     * @param \MyobAPI\MyobPHP\Model\CustomField|null $custom_field2 custom_field2
     *
     * @return $this
     */
    public function setCustomField2($custom_field2)
    {
        $this->container['custom_field2'] = $custom_field2;

        return $this;
    }

    /**
     * Gets custom_field3
     *
     * @return \MyobAPI\MyobPHP\Model\CustomField|null
     */
    public function getCustomField3()
    {
        return $this->container['custom_field3'];
    }

    /**
     * Sets custom_field3
     *
     * @param \MyobAPI\MyobPHP\Model\CustomField|null $custom_field3 custom_field3
     *
     * @return $this
     */
    public function setCustomField3($custom_field3)
    {
        $this->container['custom_field3'] = $custom_field3;

        return $this;
    }

    /**
     * Gets buying_details
     *
     * @return \MyobAPI\MyobPHP\Model\BuyingDetails
     */
    public function getBuyingDetails()
    {
        return $this->container['buying_details'];
    }

    /**
     * Sets buying_details
     *
     * @param \MyobAPI\MyobPHP\Model\BuyingDetails $buying_details buying_details
     *
     * @return $this
     */
    public function setBuyingDetails($buying_details)
    {
        $this->container['buying_details'] = $buying_details;

        return $this;
    }

    /**
     * Gets payment_details
     *
     * @return \MyobAPI\MyobPHP\Model\PaymentDetails|null
     */
    public function getPaymentDetails()
    {
        return $this->container['payment_details'];
    }

    /**
     * Sets payment_details
     *
     * @param \MyobAPI\MyobPHP\Model\PaymentDetails|null $payment_details payment_details
     *
     * @return $this
     */
    public function setPaymentDetails($payment_details)
    {
        $this->container['payment_details'] = $payment_details;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


