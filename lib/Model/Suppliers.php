<?php
/**
 * Suppliers
 *
 * PHP version 5
 *
 * @category Class
 * @package  MyobAPI\MyobPHP
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * MYOB AccountRight
 *
 * MYOB AccountRight API file
 *
 * The version of the OpenAPI document: 1.0
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 4.3.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace MyobAPI\MyobPHP\Model;

use \ArrayAccess;
use \MyobAPI\MyobPHP\ObjectSerializer;

/**
 * Suppliers Class Doc Comment
 *
 * @category Class
 * @package  MyobAPI\MyobPHP
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class Suppliers implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Suppliers';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'uid' => 'string',
        'company_name' => 'string',
        'is_individual' => 'bool',
        'display_id' => 'string',
        'is_active' => 'bool',
        'addresses' => '\MyobAPI\MyobPHP\Model\Address[]',
        'notes' => 'string',
        'identifiers' => 'string',
        'custom_list1' => 'string',
        'custom_list2' => 'string',
        'custom_list3' => 'string',
        'custom_field1' => '\MyobAPI\MyobPHP\Model\CustomField',
        'custom_field2' => '\MyobAPI\MyobPHP\Model\CustomField',
        'custom_field3' => '\MyobAPI\MyobPHP\Model\CustomField',
        'current_balance' => 'float',
        'buying_details' => '\MyobAPI\MyobPHP\Model\BuyingDetails',
        'payment_details' => '\MyobAPI\MyobPHP\Model\PaymentDetails',
        'foreign_currency' => 'string',
        'last_modified' => 'string',
        'photo_uri' => 'string',
        'uri' => 'string',
        'row_version' => 'string',
        'last_name' => 'string',
        'first_name' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'uid' => null,
        'company_name' => null,
        'is_individual' => null,
        'display_id' => null,
        'is_active' => null,
        'addresses' => null,
        'notes' => null,
        'identifiers' => null,
        'custom_list1' => null,
        'custom_list2' => null,
        'custom_list3' => null,
        'custom_field1' => null,
        'custom_field2' => null,
        'custom_field3' => null,
        'current_balance' => null,
        'buying_details' => null,
        'payment_details' => null,
        'foreign_currency' => null,
        'last_modified' => null,
        'photo_uri' => null,
        'uri' => null,
        'row_version' => null,
        'last_name' => null,
        'first_name' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'uid' => 'UID',
        'company_name' => 'CompanyName',
        'is_individual' => 'IsIndividual',
        'display_id' => 'DisplayID',
        'is_active' => 'IsActive',
        'addresses' => 'Addresses',
        'notes' => 'Notes',
        'identifiers' => 'Identifiers',
        'custom_list1' => 'CustomList1',
        'custom_list2' => 'CustomList2',
        'custom_list3' => 'CustomList3',
        'custom_field1' => 'CustomField1',
        'custom_field2' => 'CustomField2',
        'custom_field3' => 'CustomField3',
        'current_balance' => 'CurrentBalance',
        'buying_details' => 'BuyingDetails',
        'payment_details' => 'PaymentDetails',
        'foreign_currency' => 'ForeignCurrency',
        'last_modified' => 'LastModified',
        'photo_uri' => 'PhotoURI',
        'uri' => 'URI',
        'row_version' => 'RowVersion',
        'last_name' => 'LastName',
        'first_name' => 'FirstName'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'uid' => 'setUid',
        'company_name' => 'setCompanyName',
        'is_individual' => 'setIsIndividual',
        'display_id' => 'setDisplayId',
        'is_active' => 'setIsActive',
        'addresses' => 'setAddresses',
        'notes' => 'setNotes',
        'identifiers' => 'setIdentifiers',
        'custom_list1' => 'setCustomList1',
        'custom_list2' => 'setCustomList2',
        'custom_list3' => 'setCustomList3',
        'custom_field1' => 'setCustomField1',
        'custom_field2' => 'setCustomField2',
        'custom_field3' => 'setCustomField3',
        'current_balance' => 'setCurrentBalance',
        'buying_details' => 'setBuyingDetails',
        'payment_details' => 'setPaymentDetails',
        'foreign_currency' => 'setForeignCurrency',
        'last_modified' => 'setLastModified',
        'photo_uri' => 'setPhotoUri',
        'uri' => 'setUri',
        'row_version' => 'setRowVersion',
        'last_name' => 'setLastName',
        'first_name' => 'setFirstName'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'uid' => 'getUid',
        'company_name' => 'getCompanyName',
        'is_individual' => 'getIsIndividual',
        'display_id' => 'getDisplayId',
        'is_active' => 'getIsActive',
        'addresses' => 'getAddresses',
        'notes' => 'getNotes',
        'identifiers' => 'getIdentifiers',
        'custom_list1' => 'getCustomList1',
        'custom_list2' => 'getCustomList2',
        'custom_list3' => 'getCustomList3',
        'custom_field1' => 'getCustomField1',
        'custom_field2' => 'getCustomField2',
        'custom_field3' => 'getCustomField3',
        'current_balance' => 'getCurrentBalance',
        'buying_details' => 'getBuyingDetails',
        'payment_details' => 'getPaymentDetails',
        'foreign_currency' => 'getForeignCurrency',
        'last_modified' => 'getLastModified',
        'photo_uri' => 'getPhotoUri',
        'uri' => 'getUri',
        'row_version' => 'getRowVersion',
        'last_name' => 'getLastName',
        'first_name' => 'getFirstName'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['uid'] = isset($data['uid']) ? $data['uid'] : null;
        $this->container['company_name'] = isset($data['company_name']) ? $data['company_name'] : null;
        $this->container['is_individual'] = isset($data['is_individual']) ? $data['is_individual'] : null;
        $this->container['display_id'] = isset($data['display_id']) ? $data['display_id'] : null;
        $this->container['is_active'] = isset($data['is_active']) ? $data['is_active'] : null;
        $this->container['addresses'] = isset($data['addresses']) ? $data['addresses'] : null;
        $this->container['notes'] = isset($data['notes']) ? $data['notes'] : null;
        $this->container['identifiers'] = isset($data['identifiers']) ? $data['identifiers'] : null;
        $this->container['custom_list1'] = isset($data['custom_list1']) ? $data['custom_list1'] : null;
        $this->container['custom_list2'] = isset($data['custom_list2']) ? $data['custom_list2'] : null;
        $this->container['custom_list3'] = isset($data['custom_list3']) ? $data['custom_list3'] : null;
        $this->container['custom_field1'] = isset($data['custom_field1']) ? $data['custom_field1'] : null;
        $this->container['custom_field2'] = isset($data['custom_field2']) ? $data['custom_field2'] : null;
        $this->container['custom_field3'] = isset($data['custom_field3']) ? $data['custom_field3'] : null;
        $this->container['current_balance'] = isset($data['current_balance']) ? $data['current_balance'] : null;
        $this->container['buying_details'] = isset($data['buying_details']) ? $data['buying_details'] : null;
        $this->container['payment_details'] = isset($data['payment_details']) ? $data['payment_details'] : null;
        $this->container['foreign_currency'] = isset($data['foreign_currency']) ? $data['foreign_currency'] : null;
        $this->container['last_modified'] = isset($data['last_modified']) ? $data['last_modified'] : null;
        $this->container['photo_uri'] = isset($data['photo_uri']) ? $data['photo_uri'] : null;
        $this->container['uri'] = isset($data['uri']) ? $data['uri'] : null;
        $this->container['row_version'] = isset($data['row_version']) ? $data['row_version'] : null;
        $this->container['last_name'] = isset($data['last_name']) ? $data['last_name'] : null;
        $this->container['first_name'] = isset($data['first_name']) ? $data['first_name'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['uid'] === null) {
            $invalidProperties[] = "'uid' can't be null";
        }
        if ($this->container['is_individual'] === null) {
            $invalidProperties[] = "'is_individual' can't be null";
        }
        if ($this->container['display_id'] === null) {
            $invalidProperties[] = "'display_id' can't be null";
        }
        if ($this->container['is_active'] === null) {
            $invalidProperties[] = "'is_active' can't be null";
        }
        if ($this->container['addresses'] === null) {
            $invalidProperties[] = "'addresses' can't be null";
        }
        if ($this->container['notes'] === null) {
            $invalidProperties[] = "'notes' can't be null";
        }
        if ($this->container['identifiers'] === null) {
            $invalidProperties[] = "'identifiers' can't be null";
        }
        if ($this->container['custom_list1'] === null) {
            $invalidProperties[] = "'custom_list1' can't be null";
        }
        if ($this->container['custom_list2'] === null) {
            $invalidProperties[] = "'custom_list2' can't be null";
        }
        if ($this->container['custom_list3'] === null) {
            $invalidProperties[] = "'custom_list3' can't be null";
        }
        if ($this->container['custom_field1'] === null) {
            $invalidProperties[] = "'custom_field1' can't be null";
        }
        if ($this->container['custom_field2'] === null) {
            $invalidProperties[] = "'custom_field2' can't be null";
        }
        if ($this->container['custom_field3'] === null) {
            $invalidProperties[] = "'custom_field3' can't be null";
        }
        if ($this->container['current_balance'] === null) {
            $invalidProperties[] = "'current_balance' can't be null";
        }
        if ($this->container['buying_details'] === null) {
            $invalidProperties[] = "'buying_details' can't be null";
        }
        if ($this->container['payment_details'] === null) {
            $invalidProperties[] = "'payment_details' can't be null";
        }
        if ($this->container['foreign_currency'] === null) {
            $invalidProperties[] = "'foreign_currency' can't be null";
        }
        if ($this->container['last_modified'] === null) {
            $invalidProperties[] = "'last_modified' can't be null";
        }
        if ($this->container['photo_uri'] === null) {
            $invalidProperties[] = "'photo_uri' can't be null";
        }
        if ($this->container['uri'] === null) {
            $invalidProperties[] = "'uri' can't be null";
        }
        if ($this->container['row_version'] === null) {
            $invalidProperties[] = "'row_version' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets uid
     *
     * @return string
     */
    public function getUid()
    {
        return $this->container['uid'];
    }

    /**
     * Sets uid
     *
     * @param string $uid uid
     *
     * @return $this
     */
    public function setUid($uid)
    {
        $this->container['uid'] = $uid;

        return $this;
    }

    /**
     * Gets company_name
     *
     * @return string|null
     */
    public function getCompanyName()
    {
        return $this->container['company_name'];
    }

    /**
     * Sets company_name
     *
     * @param string|null $company_name company_name
     *
     * @return $this
     */
    public function setCompanyName($company_name)
    {
        $this->container['company_name'] = $company_name;

        return $this;
    }

    /**
     * Gets is_individual
     *
     * @return bool
     */
    public function getIsIndividual()
    {
        return $this->container['is_individual'];
    }

    /**
     * Sets is_individual
     *
     * @param bool $is_individual is_individual
     *
     * @return $this
     */
    public function setIsIndividual($is_individual)
    {
        $this->container['is_individual'] = $is_individual;

        return $this;
    }

    /**
     * Gets display_id
     *
     * @return string
     */
    public function getDisplayId()
    {
        return $this->container['display_id'];
    }

    /**
     * Sets display_id
     *
     * @param string $display_id display_id
     *
     * @return $this
     */
    public function setDisplayId($display_id)
    {
        $this->container['display_id'] = $display_id;

        return $this;
    }

    /**
     * Gets is_active
     *
     * @return bool
     */
    public function getIsActive()
    {
        return $this->container['is_active'];
    }

    /**
     * Sets is_active
     *
     * @param bool $is_active is_active
     *
     * @return $this
     */
    public function setIsActive($is_active)
    {
        $this->container['is_active'] = $is_active;

        return $this;
    }

    /**
     * Gets addresses
     *
     * @return \MyobAPI\MyobPHP\Model\Address[]
     */
    public function getAddresses()
    {
        return $this->container['addresses'];
    }

    /**
     * Sets addresses
     *
     * @param \MyobAPI\MyobPHP\Model\Address[] $addresses addresses
     *
     * @return $this
     */
    public function setAddresses($addresses)
    {
        $this->container['addresses'] = $addresses;

        return $this;
    }

    /**
     * Gets notes
     *
     * @return string
     */
    public function getNotes()
    {
        return $this->container['notes'];
    }

    /**
     * Sets notes
     *
     * @param string $notes notes
     *
     * @return $this
     */
    public function setNotes($notes)
    {
        $this->container['notes'] = $notes;

        return $this;
    }

    /**
     * Gets identifiers
     *
     * @return string
     */
    public function getIdentifiers()
    {
        return $this->container['identifiers'];
    }

    /**
     * Sets identifiers
     *
     * @param string $identifiers identifiers
     *
     * @return $this
     */
    public function setIdentifiers($identifiers)
    {
        $this->container['identifiers'] = $identifiers;

        return $this;
    }

    /**
     * Gets custom_list1
     *
     * @return string
     */
    public function getCustomList1()
    {
        return $this->container['custom_list1'];
    }

    /**
     * Sets custom_list1
     *
     * @param string $custom_list1 custom_list1
     *
     * @return $this
     */
    public function setCustomList1($custom_list1)
    {
        $this->container['custom_list1'] = $custom_list1;

        return $this;
    }

    /**
     * Gets custom_list2
     *
     * @return string
     */
    public function getCustomList2()
    {
        return $this->container['custom_list2'];
    }

    /**
     * Sets custom_list2
     *
     * @param string $custom_list2 custom_list2
     *
     * @return $this
     */
    public function setCustomList2($custom_list2)
    {
        $this->container['custom_list2'] = $custom_list2;

        return $this;
    }

    /**
     * Gets custom_list3
     *
     * @return string
     */
    public function getCustomList3()
    {
        return $this->container['custom_list3'];
    }

    /**
     * Sets custom_list3
     *
     * @param string $custom_list3 custom_list3
     *
     * @return $this
     */
    public function setCustomList3($custom_list3)
    {
        $this->container['custom_list3'] = $custom_list3;

        return $this;
    }

    /**
     * Gets custom_field1
     *
     * @return \MyobAPI\MyobPHP\Model\CustomField
     */
    public function getCustomField1()
    {
        return $this->container['custom_field1'];
    }

    /**
     * Sets custom_field1
     *
     * @param \MyobAPI\MyobPHP\Model\CustomField $custom_field1 custom_field1
     *
     * @return $this
     */
    public function setCustomField1($custom_field1)
    {
        $this->container['custom_field1'] = $custom_field1;

        return $this;
    }

    /**
     * Gets custom_field2
     *
     * @return \MyobAPI\MyobPHP\Model\CustomField
     */
    public function getCustomField2()
    {
        return $this->container['custom_field2'];
    }

    /**
     * Sets custom_field2
     *
     * @param \MyobAPI\MyobPHP\Model\CustomField $custom_field2 custom_field2
     *
     * @return $this
     */
    public function setCustomField2($custom_field2)
    {
        $this->container['custom_field2'] = $custom_field2;

        return $this;
    }

    /**
     * Gets custom_field3
     *
     * @return \MyobAPI\MyobPHP\Model\CustomField
     */
    public function getCustomField3()
    {
        return $this->container['custom_field3'];
    }

    /**
     * Sets custom_field3
     *
     * @param \MyobAPI\MyobPHP\Model\CustomField $custom_field3 custom_field3
     *
     * @return $this
     */
    public function setCustomField3($custom_field3)
    {
        $this->container['custom_field3'] = $custom_field3;

        return $this;
    }

    /**
     * Gets current_balance
     *
     * @return float
     */
    public function getCurrentBalance()
    {
        return $this->container['current_balance'];
    }

    /**
     * Sets current_balance
     *
     * @param float $current_balance current_balance
     *
     * @return $this
     */
    public function setCurrentBalance($current_balance)
    {
        $this->container['current_balance'] = $current_balance;

        return $this;
    }

    /**
     * Gets buying_details
     *
     * @return \MyobAPI\MyobPHP\Model\BuyingDetails
     */
    public function getBuyingDetails()
    {
        return $this->container['buying_details'];
    }

    /**
     * Sets buying_details
     *
     * @param \MyobAPI\MyobPHP\Model\BuyingDetails $buying_details buying_details
     *
     * @return $this
     */
    public function setBuyingDetails($buying_details)
    {
        $this->container['buying_details'] = $buying_details;

        return $this;
    }

    /**
     * Gets payment_details
     *
     * @return \MyobAPI\MyobPHP\Model\PaymentDetails
     */
    public function getPaymentDetails()
    {
        return $this->container['payment_details'];
    }

    /**
     * Sets payment_details
     *
     * @param \MyobAPI\MyobPHP\Model\PaymentDetails $payment_details payment_details
     *
     * @return $this
     */
    public function setPaymentDetails($payment_details)
    {
        $this->container['payment_details'] = $payment_details;

        return $this;
    }

    /**
     * Gets foreign_currency
     *
     * @return string
     */
    public function getForeignCurrency()
    {
        return $this->container['foreign_currency'];
    }

    /**
     * Sets foreign_currency
     *
     * @param string $foreign_currency foreign_currency
     *
     * @return $this
     */
    public function setForeignCurrency($foreign_currency)
    {
        $this->container['foreign_currency'] = $foreign_currency;

        return $this;
    }

    /**
     * Gets last_modified
     *
     * @return string
     */
    public function getLastModified()
    {
        return $this->container['last_modified'];
    }

    /**
     * Sets last_modified
     *
     * @param string $last_modified last_modified
     *
     * @return $this
     */
    public function setLastModified($last_modified)
    {
        $this->container['last_modified'] = $last_modified;

        return $this;
    }

    /**
     * Gets photo_uri
     *
     * @return string
     */
    public function getPhotoUri()
    {
        return $this->container['photo_uri'];
    }

    /**
     * Sets photo_uri
     *
     * @param string $photo_uri photo_uri
     *
     * @return $this
     */
    public function setPhotoUri($photo_uri)
    {
        $this->container['photo_uri'] = $photo_uri;

        return $this;
    }

    /**
     * Gets uri
     *
     * @return string
     */
    public function getUri()
    {
        return $this->container['uri'];
    }

    /**
     * Sets uri
     *
     * @param string $uri uri
     *
     * @return $this
     */
    public function setUri($uri)
    {
        $this->container['uri'] = $uri;

        return $this;
    }

    /**
     * Gets row_version
     *
     * @return string
     */
    public function getRowVersion()
    {
        return $this->container['row_version'];
    }

    /**
     * Sets row_version
     *
     * @param string $row_version row_version
     *
     * @return $this
     */
    public function setRowVersion($row_version)
    {
        $this->container['row_version'] = $row_version;

        return $this;
    }

    /**
     * Gets last_name
     *
     * @return string|null
     */
    public function getLastName()
    {
        return $this->container['last_name'];
    }

    /**
     * Sets last_name
     *
     * @param string|null $last_name last_name
     *
     * @return $this
     */
    public function setLastName($last_name)
    {
        $this->container['last_name'] = $last_name;

        return $this;
    }

    /**
     * Gets first_name
     *
     * @return string|null
     */
    public function getFirstName()
    {
        return $this->container['first_name'];
    }

    /**
     * Sets first_name
     *
     * @param string|null $first_name first_name
     *
     * @return $this
     */
    public function setFirstName($first_name)
    {
        $this->container['first_name'] = $first_name;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


